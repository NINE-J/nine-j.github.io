<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Infra on B9F1</title><link>https://b9f1.com/categories/infra/</link><description>Recent content in Infra on B9F1</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Oct 2025 17:17:14 +0900</lastBuildDate><atom:link href="https://b9f1.com/categories/infra/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS ECS + ElastiCache Redis 배포</title><link>https://b9f1.com/p/2025-10-16-deploy-elasticache-redis-with-aws-ecs/</link><pubDate>Thu, 16 Oct 2025 17:17:14 +0900</pubDate><guid>https://b9f1.com/p/2025-10-16-deploy-elasticache-redis-with-aws-ecs/</guid><description>&lt;img src="https://b9f1.com/p/2025-10-16-deploy-elasticache-redis-with-aws-ecs/cover.png" alt="Featured image of post AWS ECS + ElastiCache Redis 배포" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;ECS Fargate 기반 분산 환경에서 Redis를 어떻게 배포하고 연결하는지 간단히 정리해본다.&lt;/p&gt;
&lt;p&gt;현재 프로젝트에서는 PostgreSQL(RDS), Kafka(Confluent Cloud)와 함께 Redis를 세션/캐시용으로 운영해야 하는 상황이다.&lt;/p&gt;
&lt;p&gt;Redis를 로컬에서 &lt;code&gt;docker-compose&lt;/code&gt;로 테스트는 했지만 운영 환경에서의 연결 구조와 설정 원리를 명확히 이해하고자 한다.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="redis는-기본-구성만으로-동작한다"&gt;Redis는 기본 구성만으로 동작한다
&lt;/h3&gt;&lt;p&gt;Redis는 HTTP 기반이 아닌 TCP 기반의 Key-Value 서버다.
HTTP처럼 경로 개념이 없고 단순히 정의된 포트(기본 6379)로 열려 있는 소켓을 통해 명령을 주고 받는다.&lt;/p&gt;
&lt;p&gt;즉, Redis는 복잡한 인증이나 핸드셰이크 없이도 클라이언트가 IP와 포트를 알고 있으면 바로 접근 가능한 구조다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis는 &lt;code&gt;host:port&lt;/code&gt; 기반의 TCP 프로토콜만 있으면 동작한다.&lt;/li&gt;
&lt;li&gt;별도의 서비스 레이어가 없으므로 설정의 핵심은 어디로 붙을 것인가.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="spring-boot에서-redis-연결-구조"&gt;Spring Boot에서 Redis 연결 구조
&lt;/h3&gt;&lt;p&gt;Spring Boot는 &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt; 의존성만 추가하면 간단하게 &lt;code&gt;LettuceConnectionFactory&lt;/code&gt;, &lt;code&gt;RedisTemplate&lt;/code&gt;, &lt;code&gt;CacheManager&lt;/code&gt; 등을 등록한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;redis-cluster.xxxxxx.apn2.cache.amazonaws.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6379&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;별도의 Bean을 등록하지 않아도 Spring Boot는 이를 감지해 자동 연결한다.
설정을 생략하면 기본값(&lt;code&gt;localhost:6379&lt;/code&gt;)으로 시도한다.&lt;/p&gt;
&lt;h3 id="elastic-redis-배포-개요"&gt;Elastic Redis 배포 개요
&lt;/h3&gt;&lt;p&gt;AWS에서는 ElastiCache Redis OSS를 사용하면 서버 설치 없이 관리형 Redis 클러스터를 사용할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구성 요소&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Primary Node&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;쓰기 담당 Redis 노드&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Replica Node&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;읽기 전용 복제본 (선택사항)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cluster&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;여러 샤드로 데이터를 분산 저장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;연결용 주소 (&lt;code&gt;.cache.amazonaws.com&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="ecs-fargate-연결-구조"&gt;ECS Fargate 연결 구조
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;보안 그룹 규칙&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Inbound: 6379 허용 (ECS -&amp;gt; Redis)&lt;/li&gt;
&lt;li&gt;Outbound: ECS에서 Redis SG(Security Group)로 접근 허용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VPC&lt;/strong&gt;: 같은 VPC 또는 피어링된 네트워크에 존재해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="로컬-docker와-운영-redis의-관계"&gt;로컬 Docker와 운영 Redis의 관계
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구분&lt;/th&gt;
&lt;th&gt;로컬 환경&lt;/th&gt;
&lt;th&gt;운영 환경&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;호스트&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;localhost:6379&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Elasticache Endpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;목적&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;개발 및 단위 테스트&lt;/td&gt;
&lt;td&gt;실제 서비스 운영&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;공유 여부&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;완전히 분리&lt;/td&gt;
&lt;td&gt;완전히 분리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;차이점&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;단일 인스턴스&lt;/td&gt;
&lt;td&gt;멀티 AZ, 클러스터링, 모니터링 제공&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;즉, 코드상으로는 동일한 RedisTemplate을 사용하지만 환경 변수(&lt;code&gt;SPRING_DATA_REDIS_HOST&lt;/code&gt;, &lt;code&gt;SPRING_DATA_REDIS_PORT&lt;/code&gt;)만 달라진다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;호스트와 포트를 맞추어&lt;/strong&gt; TCP 레벨에서 연결만 되면 Redis는 별도 복잡한 설정 없이 바로 동작한다.&lt;/p&gt;
&lt;h3 id="운영-시-고려사항"&gt;운영 시 고려사항
&lt;/h3&gt;&lt;p&gt;운영 환경에서는 다음 항목들을 통해 &lt;strong&gt;보안과 안정성을 강화&lt;/strong&gt;할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구분&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;보안 그룹 제한&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Redis 포트(6379)는 오직 ECS 서비스의 보안 그룹에서만 접근 가능하도록 설정한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;VPC 내부 통신&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;퍼블릭 액세스를 비활성화하고, VPC 내부 트래픽으로만 접근을 제한한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;암호화 옵션&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Elasticache 생성 시 ‘전송 중 암호화(Encryption in-transit)’ 및 ‘저장 시 암호화(Encryption at-rest)’를 활성화한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Redis AUTH (선택)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;OSS 기본은 인증 미지원이지만, 필요 시 Redis Enterprise 또는 프록시 계층을 통해 비밀번호 인증을 구성할 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;세션 공유 설정&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Spring Boot 세션 스토어를 Redis로 변경 (&lt;code&gt;spring.session.store-type=redis&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;TTL 관리&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;캐시 만료시간을 반드시 설정 (&lt;code&gt;Duration.ofMinutes(...)&lt;/code&gt; 등).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;모니터링&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;CloudWatch, Redis SlowLog, CloudWatch Metrics 등을 활용해 지표와 성능을 추적한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;p&gt;Redis는 기본적으로 포트만 맞으면 동작하지만,&lt;br&gt;
운영 환경에서는 &lt;strong&gt;보안 그룹, VPC, 암호화 옵션&lt;/strong&gt;을 통해 최소한의 방어선을 만들 수 있다.&lt;/p&gt;
&lt;p&gt;Spring Boot에서는 host와 port만 지정하면 자동으로 연결되고 Elasticache Redis는 이를 VPC 내부에서 안전하게 관리해준다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AWS ECS / VPC / Security Group 개념&lt;/li&gt;
&lt;li&gt;Redis Key-Value 구조 및 기본 명령&lt;/li&gt;
&lt;li&gt;Spring Boot 자동 설정 (&lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://aws.amazon.com/ko/elasticache/redis/" target="_blank" rel="noopener"
&gt;Redis OSS 호환 Amazon ElastiCache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-data/redis/reference/" target="_blank" rel="noopener"
&gt;Spring Data Redis Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://redis.io/docs/latest/develop/reference/protocol-spec/" target="_blank" rel="noopener"
&gt;Redis serialization protocol specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/vpc-peering.html" target="_blank" rel="noopener"
&gt;VPC 피어링을 사용하여 VPC 연결&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://devoong2.tistory.com/entry/Kafka-%EC%99%80-Redis-%EC%9D%98-PubSub-%EB%B9%84%EA%B5%90" target="_blank" rel="noopener"
&gt;Kafka 와 Redis 의 Pub/Sub 비교&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Kafka vs Confluent</title><link>https://b9f1.com/p/2025-10-16-kafka-vs-confluent-open-source-and-managed-data-streaming-infrastructure/</link><pubDate>Thu, 16 Oct 2025 14:48:14 +0900</pubDate><guid>https://b9f1.com/p/2025-10-16-kafka-vs-confluent-open-source-and-managed-data-streaming-infrastructure/</guid><description>&lt;img src="https://b9f1.com/p/2025-10-16-kafka-vs-confluent-open-source-and-managed-data-streaming-infrastructure/cover.png" alt="Featured image of post Kafka vs Confluent" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;이벤트 기반 아키텍처에서 Kafka는 시스템 간 메시지 정합성을 유지하는 핵심 역할을 한다. 그런데 이 Kafka를 어떻게 배포할 것인지 선택해야 한다.&lt;/p&gt;
&lt;p&gt;직접 서버에 구축할 수도 있고 AWS MSK 같은 클라우드 관리형 서비스를 쓸 수도 있고 Confluent Cloud처럼 Kafka 전문 업체의 완전 관리형 서비스를 이용할 수도 있다.&lt;/p&gt;
&lt;p&gt;각 배포 방식의 특징과 장단점을 비교하여 프로젝트에 맞는 Kafka 인프라 선택 기준을 알아보자.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="kafka-배포-방법"&gt;Kafka 배포 방법
&lt;/h3&gt;&lt;p&gt;Kafka를 배포하는 방법은 크게 세 가지로 나눌 수 있다.&lt;/p&gt;
&lt;h4 id="1-자체-배포"&gt;1. 자체 배포
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;직접 서버에 Kafka 설치 및 운영&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;배포 환경&lt;/strong&gt;: 온프레미스 서버, AWS EC2, Azure VM, GCP Compute Engine 등&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;설치 방법&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;바이너리 다운로드 후 수동 설치&lt;/li&gt;
&lt;li&gt;Docker/Kubernetes를 통한 컨테이너 배포&lt;/li&gt;
&lt;li&gt;Ansible, Terraform 등 IaC 도구 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;구성&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Kafka 브로커 클러스터 (보통 3대 이상)&lt;/li&gt;
&lt;li&gt;메타데이터 관리 (Kafka 4.x는 KRaft 자체 관리)&lt;/li&gt;
&lt;li&gt;모니터링 스택 (Prometheus, Grafana 등)&lt;/li&gt;
&lt;li&gt;Kafka Connect, Schema Registry 등 별도 구축&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;완전한 제어권: 모든 설정과 튜닝 가능&lt;/li&gt;
&lt;li&gt;비용 최적화: 대규모 트래픽에서 인프라 비용 절감&lt;/li&gt;
&lt;li&gt;데이터 주권: 온프레미스나 특정 리전에 데이터 보관&lt;/li&gt;
&lt;li&gt;커스터마이징: 특수한 요구사항 반영 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;높은 운영 부담: 2-3명의 전담 인력 필요&lt;/li&gt;
&lt;li&gt;전문성 요구: Kafka 내부 구조 이해 필수&lt;/li&gt;
&lt;li&gt;장애 대응: 24/7 온콜 체계 구축 필요&lt;/li&gt;
&lt;li&gt;초기 구축 시간: 안정화까지 수주~수개월 소요&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="2-클라우드-관리형-서비스"&gt;2. 클라우드 관리형 서비스
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;클라우드 제공자의 Kafka 관리 서비스 이용&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AWS MSK (Managed Streaming for Kafka)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;AWS가 Kafka 클러스터 및 인프라 관리&lt;/li&gt;
&lt;li&gt;VPC 내부에서 프라이빗 연결&lt;/li&gt;
&lt;li&gt;CloudWatch 통합 모니터링&lt;/li&gt;
&lt;li&gt;자동 패치 및 버전 업그레이드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure Event Hubs for Kafka&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Kafka 프로토콜 호환 이벤트 스트리밍 서비스&lt;/li&gt;
&lt;li&gt;Azure 네이티브 통합&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Cloud Managed Kafka (Preview)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;GCP에서 관리하는 Kafka 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;인프라 관리 자동화: 서버 관리, 패치 불필요&lt;/li&gt;
&lt;li&gt;클라우드 생태계 통합: Lambda, S3, IAM 등 쉽게 연결&lt;/li&gt;
&lt;li&gt;빠른 프로비저닝: 클릭 몇 번으로 클러스터 생성&lt;/li&gt;
&lt;li&gt;자체 배포보다 낮은 운영 부담&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;제한된 제어권: 일부 고급 설정 불가&lt;/li&gt;
&lt;li&gt;Kafka 지식 여전히 필요: 토픽, 파티션, 컨슈머 그룹 관리는 직접&lt;/li&gt;
&lt;li&gt;추가 도구 별도 구축: Kafka Connect, Schema Registry 등&lt;/li&gt;
&lt;li&gt;비용: 자체 배포보다 비쌈 (편의성 프리미엄)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="3-완전-관리형-서비스"&gt;3. 완전 관리형 서비스
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Kafka 전문 업체의 SaaS형 서비스&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Confluent Cloud&lt;/strong&gt;: Kafka 창시자들이 만든 엔터프라이즈 플랫폼&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aiven for Apache Kafka&lt;/strong&gt;: 멀티 클라우드 지원&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Instaclustr&lt;/strong&gt;: 관리형 Kafka 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Confluent Cloud 중심 설명&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;제공하는 것&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Kafka 클러스터 완전 관리 (인프라부터 운영까지)&lt;/li&gt;
&lt;li&gt;120+ 사전 구축 커넥터 (DB, SaaS, 클라우드)&lt;/li&gt;
&lt;li&gt;Schema Registry 관리형 제공&lt;/li&gt;
&lt;li&gt;ksqlDB 및 Apache Flink 통합 (스트림 처리)&lt;/li&gt;
&lt;li&gt;Stream Catalog (데이터 계보 추적)&lt;/li&gt;
&lt;li&gt;고급 보안 및 컴플라이언스 (SOC 2, HIPAA 등)&lt;/li&gt;
&lt;li&gt;24/7 전문가 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;제로 운영 부담: 인프라 걱정 없이 바로 사용&lt;/li&gt;
&lt;li&gt;개발 생산성 극대화: 커넥터, 스키마 관리 등 즉시 활용&lt;/li&gt;
&lt;li&gt;자동 스케일링: 트래픽 변화에 자동 대응&lt;/li&gt;
&lt;li&gt;멀티 클라우드/리전: 글로벌 서비스 쉽게 구축&lt;/li&gt;
&lt;li&gt;빠른 실험: PoC부터 프로덕션까지 빠르게 전환&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;비용: 소규모에서는 경제적이나 대규모에서는 비쌈&lt;/li&gt;
&lt;li&gt;벤더 락인: Confluent 고유 기능 사용 시 이전 어려움&lt;/li&gt;
&lt;li&gt;제어권 제한: 내부 설정 접근 불가&lt;/li&gt;
&lt;li&gt;데이터 외부 전송: 온프레미스 전용 환경에서는 사용 불가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="배포-방식별-비교-매트릭스"&gt;배포 방식별 비교 매트릭스
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;비교 항목&lt;/th&gt;
&lt;th&gt;자체 배포&lt;/th&gt;
&lt;th&gt;클라우드 관리형 (AWS MSK)&lt;/th&gt;
&lt;th&gt;완전 관리형 (Confluent Cloud)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;운영 복잡도&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;높음 (전담 팀 필요)&lt;/td&gt;
&lt;td&gt;중간 (Kafka 지식 필요)&lt;/td&gt;
&lt;td&gt;낮음 (제로 운영)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;초기 구축 시간&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;수주~수개월&lt;/td&gt;
&lt;td&gt;수일~1주&lt;/td&gt;
&lt;td&gt;수분~수시간&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;전문 인력 필요&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;필수 (2-3명)&lt;/td&gt;
&lt;td&gt;필요 (1명)&lt;/td&gt;
&lt;td&gt;선택 (개발자만)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Kafka 지식 요구&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;깊은 이해 필수&lt;/td&gt;
&lt;td&gt;중급 수준&lt;/td&gt;
&lt;td&gt;기본 개념만&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;비용 (소규모)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;높음 (인력+인프라)&lt;/td&gt;
&lt;td&gt;중간&lt;/td&gt;
&lt;td&gt;낮음~중간&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;비용 (대규모)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;낮음 (최적화 시)&lt;/td&gt;
&lt;td&gt;중간&lt;/td&gt;
&lt;td&gt;높음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;확장성&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;수동 계획 필요&lt;/td&gt;
&lt;td&gt;반자동&lt;/td&gt;
&lt;td&gt;완전 자동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;보안/컴플라이언스&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;직접 구현&lt;/td&gt;
&lt;td&gt;기본 제공&lt;/td&gt;
&lt;td&gt;엔터프라이즈급&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;커넥터/도구&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;직접 구축&lt;/td&gt;
&lt;td&gt;직접 구축&lt;/td&gt;
&lt;td&gt;120+ 즉시 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;글로벌 복제&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;수동 구성&lt;/td&gt;
&lt;td&gt;복잡함&lt;/td&gt;
&lt;td&gt;클릭 몇 번&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;적합한 규모&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;월 10TB+&lt;/td&gt;
&lt;td&gt;중소 규모&lt;/td&gt;
&lt;td&gt;스타트업~중견&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="실전-선택-가이드"&gt;실전 선택 가이드
&lt;/h3&gt;&lt;h4 id="자체-배포를-선택해야-할-때"&gt;자체 배포를 선택해야 할 때
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;대규모 트래픽&lt;/strong&gt;: 월 10TB 이상의 안정적인 트래픽&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;온프레미스 필수&lt;/strong&gt;: 데이터 외부 반출이 불가능한 환경&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;특수 커스터마이징&lt;/strong&gt;: Kafka 내부 동작을 깊이 제어해야 할 때&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장기적 비용 최적화&lt;/strong&gt;: 인프라 비용을 최소화해야 할 때&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;이미 운영 중&lt;/strong&gt;: Kafka 운영 경험과 전담 팀이 있는 경우&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;비용 예시 (AWS 기준, 2025년 10월)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EC2 브로커 3대 (t3.medium): 월 약 25만원&lt;/li&gt;
&lt;li&gt;EBS 스토리지 500GB: 월 약 5만원&lt;/li&gt;
&lt;li&gt;네트워크 비용: 변동&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;인력 비용&lt;/strong&gt;: 월 500만원+ (DevOps 엔지니어 1명)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;총 비용&lt;/strong&gt;: 월 530만원+ (인프라만 30만원)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="클라우드-관리형aws-msk을-선택해야-할-때"&gt;클라우드 관리형(AWS MSK)을 선택해야 할 때
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;AWS 중심 아키텍처&lt;/strong&gt;: Lambda, S3 등과 긴밀한 통합 필요&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;중간 규모&lt;/strong&gt;: 월 1TB~10TB 정도의 트래픽&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;운영 부담 경감&lt;/strong&gt;: 인프라 관리는 자동화하고 싶지만 Kafka는 직접 관리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;클라우드 벤더 선호&lt;/strong&gt;: AWS 생태계 내에서 모든 것을 해결&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;보안 요구사항&lt;/strong&gt;: AWS IAM, VPC와의 통합 필요&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;비용 예시 (AWS MSK, 2025년 10월)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kafka.t3.small 3대: 월 약 $150 (약 20만원)&lt;/li&gt;
&lt;li&gt;스토리지: 별도 과금&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;인력 비용&lt;/strong&gt;: 월 300만원+ (Kafka 지식 보유 개발자)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;총 비용&lt;/strong&gt;: 월 320만원+&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="완전-관리형confluent-cloud을-선택해야-할-때"&gt;완전 관리형(Confluent Cloud)을 선택해야 할 때
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;빠른 MVP 검증&lt;/strong&gt;: 이벤트 스트리밍 아키텍처를 신속하게 실험&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;전담 인력 부족&lt;/strong&gt;: Kafka 전문가 채용이 어렵거나 비용 부담&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;소규모 스타트업&lt;/strong&gt;: 월 100GB~1TB 정도의 트래픽&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;글로벌 서비스&lt;/strong&gt;: 멀티 리전 복제가 필요한 경우&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;개발 집중&lt;/strong&gt;: 인프라 걱정 없이 비즈니스 로직에 집중&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;규제 산업&lt;/strong&gt;: SOC 2, HIPAA 등 컴플라이언스 인증 필요&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;비용 예시 (Confluent Cloud, 2025년 10월)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;USD 1달러 = 약 1,419원 기준&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Basic 클러스터: 월 $730 (약 100만원)&lt;/li&gt;
&lt;li&gt;스토리지 50GB: 월 $5 (약 7천원)&lt;/li&gt;
&lt;li&gt;네트워크 100GB: 월 $9 (약 1만원)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;인력 비용&lt;/strong&gt;: 0원 (일반 개발자만 있으면 됨)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;총 비용&lt;/strong&gt;: 월 101만원 (소규모)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프리 크레딧&lt;/strong&gt;: $400 제공 (약 55만원 상당)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="하이브리드-전략-단계적-접근"&gt;하이브리드 전략: 단계적 접근
&lt;/h3&gt;&lt;p&gt;많은 기업이 채택하는 현실적인 전략:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 1: 초기 단계 (Confluent Cloud)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PoC 및 MVP 빠르게 검증&lt;/li&gt;
&lt;li&gt;초기 서비스 런칭 (월 트래픽 ~1TB)&lt;/li&gt;
&lt;li&gt;팀 규모: 개발자 2-3명&lt;/li&gt;
&lt;li&gt;비용: 월 100~200만원&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Phase 2: 성장 단계 (계속 Confluent 또는 MSK 검토)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트래픽 증가 (월 1TB~10TB)&lt;/li&gt;
&lt;li&gt;비용 분석 시작&lt;/li&gt;
&lt;li&gt;Kafka 전문 인력 1명 채용 고려&lt;/li&gt;
&lt;li&gt;비용: 월 200~500만원&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Phase 3: 성숙 단계 (자체 배포 전환 검토)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;대규모 트래픽 (월 10TB+)&lt;/li&gt;
&lt;li&gt;전담 인프라 팀 구성&lt;/li&gt;
&lt;li&gt;자체 배포로 전환하여 TCO 60% 절감&lt;/li&gt;
&lt;li&gt;비용: 월 500~1,000만원 (하지만 트래픽은 10배+)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;병행 사용 예시&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;핵심 서비스: 자체 배포 (안정성, 비용 최적화)&lt;/li&gt;
&lt;li&gt;실험적 프로젝트: Confluent Cloud (빠른 실험)&lt;/li&gt;
&lt;li&gt;글로벌 리전: Confluent Cloud (멀티 리전 자동 복제)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;p&gt;세 가지 배포 방식은 각각 명확한 장단점이 있으며 정답은 조직의 상황에 달려 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;자체 배포&lt;/strong&gt; 는 대규모 트래픽과 전문 인력이 있을 때 최적의 선택이다.
완전한 제어권과 비용 최적화를 얻지만 운영 복잡도와 인력 투자가 크다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;클라우드 관리형(AWS MSK)&lt;/strong&gt; 은 AWS 생태계를 쓰면서 운영 부담을 줄이고 싶을 때 중간 지점이다. 인프라는 자동화되지만 Kafka 지식은 여전히 필요하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;완전 관리형(Confluent Cloud)&lt;/strong&gt; 은 빠른 실행과 제로 운영 부담이 필요할 때 최선이다.
소규모에서는 인력 비용 고려 시 가장 경제적이지만 대규모에서는 비용이 높아질 수 있다.&lt;/p&gt;
&lt;p&gt;Kafka 인프라를 관리하는 데 시간을 쓸 것인지 아니면 고객 가치를 만드는 데 집중할 것인지 스스로 질문해보자.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;필수 개념&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Apache Kafka 기본&lt;/strong&gt;: Topic, Partition, Producer, Consumer, Broker&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;이벤트 기반 아키텍처&lt;/strong&gt;: 비동기 메시징, 이벤트 소싱&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;클라우드 서비스 모델&lt;/strong&gt;: IaaS, PaaS, SaaS 차이&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;알아두면 좋은 개념&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;분산 시스템&lt;/strong&gt;: 복제, 파티셔닝, 합의 알고리즘&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevOps&lt;/strong&gt;: CI/CD, 모니터링, IaC (Infrastructure as Code)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kafka 생태계&lt;/strong&gt;: Kafka Connect, Kafka Streams, Schema Registry&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;공식 문서&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener"
&gt;Apache Kafka Documentation&lt;/a&gt; - 오픈소스 공식 문서&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.confluent.io/" target="_blank" rel="noopener"
&gt;Confluent Documentation&lt;/a&gt; - Confluent Platform 문서&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.aws.amazon.com/msk/" target="_blank" rel="noopener"
&gt;AWS MSK Documentation&lt;/a&gt; - AWS 관리형 Kafka&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.confluent.io/ko-kr/apache-kafka-vs-confluent/" target="_blank" rel="noopener"
&gt;CONFLUENT의 어필 - Confluent와 Apache Kafka® 비교&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;핵심 개념 심화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kafka Connect&lt;/strong&gt;: 외부 시스템(DB, SaaS)과 데이터 파이프라인 구축&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schema Registry&lt;/strong&gt;: Avro/Protobuf 스키마 버전 관리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kafka Streams&lt;/strong&gt;: 자바 기반 스트림 처리 라이브러리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ksqlDB&lt;/strong&gt;: SQL로 스트림 처리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apache Flink&lt;/strong&gt;: 대규모 상태 기반 복잡한 스트림 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;AWS 연동 가이드&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html" target="_blank" rel="noopener"
&gt;AWS Lambda + Kafka 연동&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html" target="_blank" rel="noopener"
&gt;VPC 피어링으로 Confluent Cloud 연결&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.confluent.io/aws-msk-alternative/" target="_blank" rel="noopener"
&gt;MSK vs Confluent Cloud 비교&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>AWS RDS vs EC2 직접 설치</title><link>https://b9f1.com/p/2025-08-03-differences-between-using-aws-rds-and-installing-db-directly-into-ec2/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0900</pubDate><guid>https://b9f1.com/p/2025-08-03-differences-between-using-aws-rds-and-installing-db-directly-into-ec2/</guid><description>&lt;img src="https://b9f1.com/p/2025-08-03-differences-between-using-aws-rds-and-installing-db-directly-into-ec2/cover.png" alt="Featured image of post AWS RDS vs EC2 직접 설치" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;초기 프로젝트를 구축하거나 서비스를 운영하는 과정에서 &lt;strong&gt;데이터베이스를 어디에 설치할지&lt;/strong&gt;는 중요한 결정 중 하나다.&lt;/p&gt;
&lt;p&gt;특히 AWS 환경에서는 &lt;code&gt;RDS&lt;/code&gt;를 사용할지, &lt;code&gt;EC2&lt;/code&gt;에 직접 설치할지를 두고 많은 고민을 하게 된다.&lt;/p&gt;
&lt;p&gt;실제 운영 관점에서 &lt;strong&gt;RDS의 주요 이점과 EC2 직접 설치 방식과의 차이점&lt;/strong&gt;을 정리하고 &lt;code&gt;RDS&lt;/code&gt;가 적합하지 않은 상황까지 함께 다뤄보려 한다.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="rds를-사용할-때의-주요-이점"&gt;RDS를 사용할 때의 주요 이점
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;자동화된 관리&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;백업, 보안 패치, 장애 복구까지 AWS가 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-AZ 구성 가능&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;자동 장애 조치(Failover) 지원으로 고가용성 확보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;자동 백업 및 시점 복구(PITR)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;데이터 복구를 쉽게 수행 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;보안 강화&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;IAM 인증, KMS 암호화, 보안 그룹 등 보안 기능 내장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;모니터링 및 알림&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;CloudWatch 연동으로 실시간 DB 상태 확인 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;스케일링 유연성&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;수직 확장과 읽기 전용 복제(Replica) 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ec2에-직접-설치와-비교"&gt;EC2에 직접 설치와 비교
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;항목&lt;/th&gt;
&lt;th&gt;EC2 직접 설치&lt;/th&gt;
&lt;th&gt;RDS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;설치 편의성&lt;/td&gt;
&lt;td&gt;수동&lt;/td&gt;
&lt;td&gt;자동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;패치 및 유지보수&lt;/td&gt;
&lt;td&gt;직접 관리&lt;/td&gt;
&lt;td&gt;AWS 자동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;확장성&lt;/td&gt;
&lt;td&gt;어렵고 시간 소요&lt;/td&gt;
&lt;td&gt;빠르고 간편&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;장애 조치&lt;/td&gt;
&lt;td&gt;복잡한 구성 필요&lt;/td&gt;
&lt;td&gt;자동 장애 복구 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;보안 설정&lt;/td&gt;
&lt;td&gt;수동 구성&lt;/td&gt;
&lt;td&gt;IAM, KMS 등 통합 제공&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;백업/복구&lt;/td&gt;
&lt;td&gt;직접 스크립트 작성&lt;/td&gt;
&lt;td&gt;자동 백업 및 PITR 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;직접 설치는 최대한의 유연성과 커스터마이징이 가능하다는 장점이 있지만, &lt;strong&gt;보안과 가용성을 직접 관리해야 한다는 부담&lt;/strong&gt;이 있다.&lt;/p&gt;
&lt;p&gt;특히 운영 경험이 적거나 인프라 리소스가 부족한 팀에게는 &lt;code&gt;RDS&lt;/code&gt;가 훨씬 더 효율적이다.&lt;/p&gt;
&lt;h3 id="rds가-적합하지-않은-케이스"&gt;RDS가 적합하지 않은 케이스
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;복잡한 확장 플러그인이 필요한 경우&lt;/strong&gt; (예: PostgreSQL의 일부 확장 모듈 미지원)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DB 튜닝을 위해 커널 파라미터까지 조정해야 하는 경우&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;최소비용으로 간헐적 사용을 원할 때&lt;/strong&gt; (EC2+Docker가 유리)&lt;/li&gt;
&lt;li&gt;사내망 또는 외부 연결이 자유로운 구조를 구성하고자 할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;복잡한 운영을 줄이고 안정성을 확보하고 싶다면, AWS RDS는 최고의 선택이 될 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;하지만 반대로, &lt;strong&gt;비용 최적화·유연성·특수 환경을 원한다면 EC2 직접 설치가 유리할 수 있다.&lt;/strong&gt;
결국 핵심은 &lt;strong&gt;“어떤 서비스를 어떻게 운영할 것인가?”&lt;/strong&gt; 에 달려 있다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AWS 서비스 (EC2, RDS, VPC, IAM, KMS)&lt;/li&gt;
&lt;li&gt;리눅스 서버와 DB 설치 경험&lt;/li&gt;
&lt;li&gt;PostgreSQL 또는 MySQL과 같은 관계형 DB 운영 경험&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.aws.amazon.com/rds/" target="_blank" rel="noopener"
&gt;Amazon RDS 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.postgresql.org/docs/current/contrib.html" target="_blank" rel="noopener"
&gt;PostgreSQL 확장 기능 목록&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/welcome.html" target="_blank" rel="noopener"
&gt;AWS Well-Architected Framework: Operational Excellence Pillar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>컨테이너 오케스트레이션</title><link>https://b9f1.com/p/2025-06-25-infra-what-is-container-orchestration/</link><pubDate>Wed, 25 Jun 2025 22:17:57 +0900</pubDate><guid>https://b9f1.com/p/2025-06-25-infra-what-is-container-orchestration/</guid><description>&lt;img src="https://b9f1.com/p/2025-06-25-infra-what-is-container-orchestration/cover.png" alt="Featured image of post 컨테이너 오케스트레이션" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;Docker는 컨테이너 단위의 애플리케이션 패키징과 실행이 뛰어나지만 실제 운영 환경에서는 수십, 수백 개의 컨테이너를 배포하고 유지해야 하는 복잡한 상황이 발생한다.&lt;/p&gt;
&lt;p&gt;이 문제를 해결하기 위해 등장한 개념이 컨테이너 오케스트레이션(Container Orchestration)이다.&lt;/p&gt;
&lt;p&gt;오케스트레이션의 핵심 개념과 필요성, Docker 단독 환경의 한계, Kubernetes를 중심으로 오케스트레이터가 해결하는 세 가지 주요 문제를 알아보자.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="컨테이너-오케스트레이션이란"&gt;컨테이너 오케스트레이션이란?
&lt;/h3&gt;
&lt;div class="admonition info"&gt;
&lt;div class="admonition-header"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"&gt;&lt;path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/&gt;&lt;/svg&gt;
&lt;span&gt;오케스트라(orchestra)에서 유래&lt;/span&gt;
&lt;/div&gt;
&lt;div class="admonition-content"&gt;
&lt;ul&gt;
&lt;li&gt;오케스트라: 수십 개의 악기가 각자 연주하지만 지휘자가 이를 정해진 순서와 규칙에 따라 통제하여 하나의 음악으로 만들어낸다.&lt;/li&gt;
&lt;li&gt;개발 시스템: 수많은 컨테이너, 서비스, 배포, 트래픽, 설정이 따로따로 존재하지만 오케스트레이터가 이를 자동으로 조율하여 하나의 애플리케이션처럼 작동하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;컨테이너 오케스트레이션은 다음과 같은 작업을 자동화한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컨테이너의 배포 및 종료&lt;/li&gt;
&lt;li&gt;헬스 체크 및 실패 시 자동 복구&lt;/li&gt;
&lt;li&gt;트래픽에 따라 컨테이너 자동 확장/축소&lt;/li&gt;
&lt;li&gt;로드 밸런싱, 서비스 디스커버리&lt;/li&gt;
&lt;li&gt;YAML을 활용한 선언적 구성(Declarative Configuration)을 통한 인프라 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;단일 컨테이너 환경에서는 수작업이나 스크립트로 관리가 가능하지만 수십 개 이상의 컨테이너를 운영하는 클러스터 환경에서는 비효율과 오류를 피하기 어렵다.&lt;/p&gt;
&lt;h3 id="docker-단독-사용-환경의-한계"&gt;Docker 단독 사용 환경의 한계
&lt;/h3&gt;&lt;p&gt;Docker는 다음과 같은 측면에서 한계가 존재한다.&lt;/p&gt;
&lt;h4 id="수동-스케일링"&gt;수동 스케일링
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; 명령어로 컨테이너 개수를 수동 조정&lt;/li&gt;
&lt;li&gt;실시간 트래픽 변화에 대응 불가&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="제한된-복구-기능"&gt;제한된 복구 기능
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--restart&lt;/code&gt; 자동 재시작은 가능하지만, 헬스 체크 기반 복구, 다중 노드 상태 관리는 불가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="서비스-수준-추상화-부족"&gt;서비스 수준 추상화 부족
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Docker Compose로 일부 기능(네트워크, 볼륨, 환경변수)은 구성 가능&lt;/li&gt;
&lt;li&gt;하지만 로드밸런싱, 트래픽 분산, 서비스 디스커버리 등은 부족하거나 수동 구성 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="오케스트레이션이-해결하는-주요-문제-3가지"&gt;오케스트레이션이 해결하는 주요 문제 3가지
&lt;/h3&gt;&lt;h4 id="자동-확장---auto-scaling"&gt;자동 확장 - Auto Scaling
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;문제: 트래픽 급증 시 컨테이너 수를 사람이 조정해야 함&lt;/li&gt;
&lt;li&gt;해결: k8s는 &lt;code&gt;Horizontal Pod Autoscaler&lt;/code&gt;를 통해 리소스(CPU, 메모리) 사용량 기준으로 Pod 수를 자동 조절&lt;/li&gt;
&lt;li&gt;예시: CPU 사용률이 80% 이상일 때 3개에서 10개로 자동 확장&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="자가-복구---self-healing"&gt;자가 복구 - Self-Healing
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;문제: 컨테이너가 비정상 종료될 경우 사람이 직접 조치해야 함&lt;/li&gt;
&lt;li&gt;해결: k8s는 &lt;code&gt;livenessProbe&lt;/code&gt;, &lt;code&gt;readinessProbe&lt;/code&gt;를 통해 주기적으로 상태를 체크하고 실패한 컨테이너는 자동 재시작 또는 교체
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;livenessProbe&lt;/code&gt;: &amp;ldquo;얘가 아직 살아 있나?&amp;rdquo; 판단하는 검사
&lt;ul&gt;
&lt;li&gt;자동 재시작&lt;/li&gt;
&lt;li&gt;컨테이너가 비정상 상태일 경우 자동으로 재시작해줌&lt;/li&gt;
&lt;li&gt;예: 무한 루프에 빠졌거나 내부적으로는 죽었는데 프로세스는 살아 있는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readinessProbe&lt;/code&gt;: &amp;ldquo;얘가 트래픽 받을 준비가 됐나?&amp;rdquo; 판단하는 검사
&lt;ul&gt;
&lt;li&gt;장애 확산 방지&lt;/li&gt;
&lt;li&gt;준비되지 않은 컨테이너는 Service에 등록되지 않음&lt;/li&gt;
&lt;li&gt;앱이 시작은 됐지만 DB 연결이 아직 안 됐다면 트래픽 받지 않도록 막아줌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="선언적-인프라---declarative-infrastructure"&gt;선언적 인프라 - Declarative Infrastructure
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;문제: 수동 명령어는 현재 상태를 명확히 알기 어렵고 일관성 유지가 어려움&lt;/li&gt;
&lt;li&gt;해결: k8s에서는 YAML 파일에 &amp;ldquo;이 시스템은 이래야 한다&amp;quot;고 선언하면 클러스터가 이를 자동으로 유지
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 선언 예시&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;apps/v1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;Deployment&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;- &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;my-app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;my-app:latest&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="docker-compose-vs-kubernetes-비교"&gt;Docker Compose vs Kubernetes 비교
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;항목&lt;/th&gt;
&lt;th&gt;Docker Compose&lt;/th&gt;
&lt;th&gt;Kubernetes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;스케일링&lt;/td&gt;
&lt;td&gt;수동 조정 (&lt;code&gt;--scale&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;HPA 기반 자동 확장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;복구&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--restart&lt;/code&gt;로 기본 재시작&lt;/td&gt;
&lt;td&gt;상태 기반 자가 복구&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;디스커버리&lt;/td&gt;
&lt;td&gt;내부 DNS 미지원 (v2 기준)&lt;/td&gt;
&lt;td&gt;서비스명 기반 자동 디스커버리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;학습 곡선&lt;/td&gt;
&lt;td&gt;낮음&lt;/td&gt;
&lt;td&gt;높음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;운영 복잡도&lt;/td&gt;
&lt;td&gt;낮음 (로컬)&lt;/td&gt;
&lt;td&gt;높지만 강력함&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="오케스트레이터-선택-기준"&gt;오케스트레이터 선택 기준
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;오케스트레이터&lt;/th&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;th&gt;적합한 상황&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;CNCF 주도, 생태계 광범위&lt;/td&gt;
&lt;td&gt;MSA 기반 대규모 서비스&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker Swarm&lt;/td&gt;
&lt;td&gt;Docker와 연동 용이, 간결함&lt;/td&gt;
&lt;td&gt;중소 규모 단일 클러스터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS ECS / Fargate&lt;/td&gt;
&lt;td&gt;서버리스, 비용 최적화&lt;/td&gt;
&lt;td&gt;AWS 중심의 배포 전략&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;컨테이너 오케스트레이션은 현대적인 서비스 운영을 위한 기본이자 필수 인프라 기술이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;학습과 실험엔 Docker만으로 충분하지만 실전에서는 운영 자동화, 복구, 확장성, 일관된 인프라 구성이 가능한 오케스트레이터가 반드시 필요하다.&lt;/p&gt;
&lt;p&gt;특히 Kubernetes는 클라우드 네이티브 환경의 표준으로 자리 잡았다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Docker의 기본 사용법&lt;/li&gt;
&lt;li&gt;컨테이너 개념 (이미지, 레지스트리, 실행 등)&lt;/li&gt;
&lt;li&gt;YAML 파일의 구조 이해&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://kubernetes.io/ko/docs/home/" target="_blank" rel="noopener"
&gt;Kubernetes 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noopener"
&gt;Kubernetes Horizontal Pod Autoscaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://landscape.cncf.io/" target="_blank" rel="noopener"
&gt;CNCF Landscape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>컨테이너 기술 vs Docker</title><link>https://b9f1.com/p/2025-06-24-infra-same-but-different-concept-container-technology-and-docker/</link><pubDate>Tue, 24 Jun 2025 14:04:36 +0900</pubDate><guid>https://b9f1.com/p/2025-06-24-infra-same-but-different-concept-container-technology-and-docker/</guid><description>&lt;img src="https://b9f1.com/p/2025-06-24-infra-same-but-different-concept-container-technology-and-docker/cover.png" alt="Featured image of post 컨테이너 기술 vs Docker" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Docker와 컨테이너는 다르다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;많은 개발자가 처음 접하는 컨테이너 기술은 Docker로 이어지지만 사실 Docker는 컨테이너 기술을 기반으로 만들어진 하나의 구현체일 뿐이다.&lt;/p&gt;
&lt;p&gt;Docker보다 훨씬 이전에 등장했던 컨테이너 기술의 뿌리를 짚고 Docker가 어떤 혁신을 만들어냈는지, 또 최근에는 어떤 대체 도구들이 등장했는지 알아보자.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="컨테이너-기술의-본질"&gt;컨테이너 기술의 본질
&lt;/h3&gt;&lt;p&gt;컨테이너란 운영체제 수준에서 프로세스를 격리(isolation)하여 마치 독립된 시스템처럼 동작하게 하는 기술이다.&lt;/p&gt;
&lt;p&gt;이 격리는 주로 아래 두 가지 리눅스 커널 기능을 조합해서 이루어진다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;네임스페이스(namespace)
&lt;ul&gt;
&lt;li&gt;프로세스, 파일 시스템, 사용자 ID, 네트워크 등 다양한 시스템 리소스를 다른 컨테이너와 분리하는 기술&lt;/li&gt;
&lt;li&gt;첫 등장: 2002년 mount namespace (&lt;code&gt;Linux 2.4.19&lt;/code&gt;), 본격적으로 컨테이너화 가능해진 시점은 &lt;code&gt;2008년 2.6.24&lt;/code&gt; 이후&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cgroups(control groups)
&lt;ul&gt;
&lt;li&gt;CPU, 메모리, 디스크 등 리소스 사용량을 제한하고 분리할 수 있도록 해주는 기능&lt;/li&gt;
&lt;li&gt;구글이 2006년 내부적으로 개발, &lt;code&gt;2008년 리눅스 2.6.24&lt;/code&gt;에 정식 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;link rel="stylesheet" href="https://b9f1.com/css/vendors/admonitions.5c21d3611305826ca76e50bf22bdda6ed74f2f81d26216e9166f9ae104f2e27a.css" integrity="sha256-XCHTYRMFgmynblC/Ir3abtdPL4HSYhbpFm&amp;#43;a4QTy4no=" crossorigin="anonymous"&gt;
&lt;div class="admonition info"&gt;
&lt;div class="admonition-header"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"&gt;&lt;path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/&gt;&lt;/svg&gt;
&lt;span&gt;Info&lt;/span&gt;
&lt;/div&gt;
&lt;div class="admonition-content"&gt;
&lt;p&gt;리눅스 커널 2.6.24부터 namespace와 cgroups가 안정적으로 통합되며 현대적인 컨테이너 개념이 실현 가능해졌다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="docker-이전에도-컨테이너는-있었다"&gt;Docker 이전에도 컨테이너는 있었다
&lt;/h3&gt;&lt;p&gt;컨테이너 기술이 단지 Docker로부터 시작되었다고 생각하지 말자.
대표적인 두 가지 사례만 봐도 충분하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Borg(2006~)
&lt;ul&gt;
&lt;li&gt;구글은 자체 클러스터 관리 시스템인 Borg에서 &lt;code&gt;process containers&lt;/code&gt;라는 이름으로 컨테이너 기술을 도입해 사용하고 있었다. 이 경험은 나중에 &lt;code&gt;Kubernetes&lt;/code&gt;(&lt;code&gt;k8s&lt;/code&gt;)로 이어지게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LXC(Linux Containers)
&lt;ul&gt;
&lt;li&gt;2008년 등장한 LXC는 리눅스 네임스페이스와 cgroups를 조합해 독립된 사용자 공간을 제공하는 최초의 완전한 리눅스 컨테이너 런타임이었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, Docker 이전에도 컨테이너는 실제 운영 환경에서 사용되고 있었다.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;div class="admonition-header"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"&gt;&lt;path d="M272 384c9.6-31.9 29.5-59.1 49.2-86.2c0 0 0 0 0 0c5.2-7.1 10.4-14.2 15.4-21.4c19.8-28.5 31.4-63 31.4-100.3C368 78.8 289.2 0 192 0S16 78.8 16 176c0 37.3 11.6 71.9 31.4 100.3c5 7.2 10.2 14.3 15.4 21.4c0 0 0 0 0 0c19.8 27.1 39.7 54.4 49.2 86.2l160 0zM192 512c44.2 0 80-35.8 80-80l0-16-160 0 0 16c0 44.2 35.8 80 80 80zM112 176c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-61.9 50.1-112 112-112c8.8 0 16 7.2 16 16s-7.2 16-16 16c-44.2 0-80 35.8-80 80z"/&gt;&lt;/svg&gt;
&lt;span&gt;Tip&lt;/span&gt;
&lt;/div&gt;
&lt;div class="admonition-content"&gt;
&lt;p&gt;&lt;code&gt;k8s&lt;/code&gt;(kubernetes), &lt;code&gt;i18n&lt;/code&gt;(internationalization), &lt;code&gt;a11y&lt;/code&gt;(accessibility) 같은 축약어는 단어의 첫 글자 + 생략된 글자 수 + 마지막 글자 형태로 만들어진 축약어다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;긴 단어를 짧게 줄여서 쓰기 편하게&lt;/li&gt;
&lt;li&gt;기술 문서나 코드에서 가독성과 공간 절약을 위해&lt;/li&gt;
&lt;li&gt;축약하면서도 고유성을 유지&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="docker는-무엇이-달랐나"&gt;Docker는 무엇이 달랐나?
&lt;/h3&gt;&lt;p&gt;Docker는 2013년에 등장하여 기존 컨테이너 기술을 개발자 친화적으로 쉽게 쓸 수 있도록 UX를 패키징한 도구로서 주목받았다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker는 컨테이너 기술 자체를 발명한 게 아니라 그것을 &amp;lsquo;쉽게 쓸 수 있도록&amp;rsquo; 만들어 낸 데 혁신이 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Docker의 핵심 혁신:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DockerFile&lt;/code&gt;로 정의 가능한 이미지 기반 환경 구성&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; 같은 직관적인 CLI&lt;/li&gt;
&lt;li&gt;Docker Hub를 통한 이미지 공유 및 배포&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="또-다른-컨테이너-도구들"&gt;또 다른 컨테이너 도구들
&lt;/h3&gt;&lt;p&gt;컨테이너 기술은 OCI(Open Container Initiative)라는 표준에 의해 정의된다.
이 표준을 기반으로 다양한 런타임이 Docker 외에도 등장하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Container Runtime: 컨테이너를 실행하는 역할
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;runc&lt;/code&gt;: Docker도 내부적으로 사용하는 기본 실행기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conatinerd&lt;/code&gt;: CNCF가 관리하는 Docker 독립형 런타임&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CRI-O&lt;/code&gt;: Kubernetes 전용으로 설계된 경량 런타임임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docker 대체 도구:
&lt;ul&gt;
&lt;li&gt;Podman: rootless 컨테이너, systemd 통합 지원, Docker Daemon 없이 작동&lt;/li&gt;
&lt;li&gt;Buildah: Dockerfile 없이 이미지 빌드 가능, Podman과 연동&lt;/li&gt;
&lt;li&gt;Kubernetes: 직접 컨테이너를 실행하지 않지만 런타임 인터페이스(Container Runtime Interface - CRI)를 통해 위 런타임과 연동&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="docker는-이제-표준이-아니다"&gt;Docker는 이제 표준이 아니다?
&lt;/h3&gt;&lt;p&gt;2020년 이후 Kubernetes는 Docker를 기본 런타임에서 제외했고 대신 &lt;code&gt;containered&lt;/code&gt;, &lt;code&gt;CRI-O&lt;/code&gt;와 같은 런타임을 사용한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker가 문제가 아니라 Docker의 구조가 Kubernetes와 궁합이 맞지 않아서다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kubernetes는 CRI라는 표준 API로 런타임을 호출한다.
하지만 Docker는 이 CRI를 직접 구현하지 않고 중간 계층(containerd + shim)을 사용해 간접적으로 연동된다.&lt;/p&gt;
&lt;p&gt;오히려 containerd나 CRI-O처럼 CRI를 직접 구현한 런타임이 더 효율적이다.&lt;/p&gt;
&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;컨테이너는 기술이고 Docker는 그 기술을 손쉽게 만든 하나의 도구다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Docker는 훌륭한 UX 도구지만 그 자체가 컨테이너 기술의 전부는 아니다.
컨테이너 생태계는 이제 Docker를 넘어 다양화되고 있으며 오픈소스 커뮤니티와 표준화가 이를 이끌고 있다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;이미지 빌드와 레이어 개념&lt;/li&gt;
&lt;li&gt;Kubernetes의 CRI(Container Runtime Interface)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener"
&gt;Linux namespaces - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/Cgroups" target="_blank" rel="noopener"
&gt;Cgroups - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener"
&gt;리눅스 커널 2.6 - 네임스페이스 기반 컨테이너 기술&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://news.ycombinator.com/item?id=30327507" target="_blank" rel="noopener"
&gt;Google Borg (2006~) – Docker 이전부터 컨테이너 활용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.aquasec.com/blog/a-brief-history-of-containers-from-1970s-chroot-to-docker-2016" target="_blank" rel="noopener"
&gt;LXC (Linux Containers) – Docker보다 선행한 사례&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://opencontainers.org/" target="_blank" rel="noopener"
&gt;Open Container Initiative (OCI)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://podman.io/" target="_blank" rel="noopener"
&gt;Podman 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://containerd.io/" target="_blank" rel="noopener"
&gt;containerd 공식 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>