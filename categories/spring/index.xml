<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on B9F1</title><link>https://b9f1.com/categories/spring/</link><description>Recent content in Spring on B9F1</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 13 Sep 2025 21:03:30 +0900</lastBuildDate><atom:link href="https://b9f1.com/categories/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>설정 어노테이션 비교</title><link>https://b9f1.com/p/2025-09-13-configuration-vs-testconfiguration/</link><pubDate>Sat, 13 Sep 2025 21:03:30 +0900</pubDate><guid>https://b9f1.com/p/2025-09-13-configuration-vs-testconfiguration/</guid><description>&lt;img src="https://b9f1.com/p/2025-09-13-configuration-vs-testconfiguration/cover.png" alt="Featured image of post 설정 어노테이션 비교" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;Spring Boot에서 애플리케이션 설정을 구성할 때 자주 쓰이는 &lt;code&gt;@Configuration&lt;/code&gt;과 테스트 환경에서 활용되는 &lt;code&gt;@TestConfiguration&lt;/code&gt;은 비슷해 보이지만 동작 방식과 적용 범위가 다르다.&lt;/p&gt;
&lt;p&gt;두 어노테이션의 &lt;strong&gt;자동 등록 여부, 프로필 영향, 스캔 시점&lt;/strong&gt;을 기준으로 비교해보고 어떤 상황에서 적절히 선택해야 하는지 정리한다.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="1-자동-등록-여부"&gt;1. 자동 등록 여부
&lt;/h3&gt;&lt;h4 id="configuration"&gt;@Configuration
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Component&lt;/code&gt; 계열 어노테이션처럼 Spring의 &lt;strong&gt;컴포넌트 스캔 대상&lt;/strong&gt;에 포함된다.&lt;/li&gt;
&lt;li&gt;별도의 import 없이도 &lt;code&gt;ApplicationContext&lt;/code&gt; 초기화 시 자동으로 등록된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="testconfiguration"&gt;@TestConfiguration
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;자동 스캔 제외&lt;/strong&gt; 대상이다.&lt;/li&gt;
&lt;li&gt;테스트 컨텍스트에선 기본적으로 로드되지 않으며, 다음과 같은 경우에만 적용된다:
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;테스트 클래스 내부 static class&lt;/strong&gt; 로 선언했을 때&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Import&lt;/code&gt; 등을 통해 명시적으로 가져왔을 때&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-프로필profile-영향"&gt;2. 프로필(Profile) 영향
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;두 어노테이션 모두 &lt;code&gt;@Profile&lt;/code&gt;을 함께 사용하면 활성화된 profile에 따라 적용 여부가 결정된다.&lt;/li&gt;
&lt;li&gt;하지만 &lt;code&gt;@TestConfiguration&lt;/code&gt;은 기본적으로 스캔되지 않기 때문에, &lt;strong&gt;import되거나 테스트 내부에 선언된 경우에만 프로필 조건이 평가&lt;/strong&gt;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-적용-시점--스캔"&gt;3. 적용 시점 / 스캔
&lt;/h3&gt;&lt;h4 id="configuration-1"&gt;@Configuration
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;애플리케이션 실행 시 Spring Context 초기화 과정에서 &lt;strong&gt;컴포넌트 스캔, Bean 정의 등록&lt;/strong&gt; 순서로 처리된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="testconfiguration-1"&gt;@TestConfiguration
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;테스트 실행 시 컨텍스트에 주입된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Import&lt;/code&gt;된 경우에는 일반 컴포넌트보다 &lt;strong&gt;먼저 적용&lt;/strong&gt;되며 이후 테스트 컨텍스트에 필요한 빈들을 우선적으로 교체하거나 오버라이드할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4-사용-목적"&gt;4. 사용 목적
&lt;/h3&gt;&lt;h4 id="configuration-2"&gt;@Configuration
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;프로덕션 및 애플리케이션 전역 설정을 관리한다.&lt;/li&gt;
&lt;li&gt;예: &lt;code&gt;DataSource&lt;/code&gt;, &lt;code&gt;Service Bean&lt;/code&gt;, &lt;code&gt;MessageConverter&lt;/code&gt; 설정 등.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="testconfiguration-2"&gt;@TestConfiguration
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;테스트 전용 설정을 분리하기 위한 용도로 사용한다.&lt;/li&gt;
&lt;li&gt;예: &lt;code&gt;MockBean&lt;/code&gt;, &lt;code&gt;Stub&lt;/code&gt;, &lt;code&gt;Testcontainers 초기화&lt;/code&gt;, 테스트용 Repository 대체 설정 등.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Configuration&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;애플리케이션 전역&lt;/strong&gt; 설정&lt;/li&gt;
&lt;li&gt;컴포넌트 스캔 대상&lt;/li&gt;
&lt;li&gt;프로덕션/테스트 어디든 포함될 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@TestConfiguration&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;테스트 전용&lt;/strong&gt; 설정&lt;/li&gt;
&lt;li&gt;자동 스캔 제외 (명시적 import 또는 static inner class로 사용)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;운영 환경에서는 로딩되지 않음&lt;/strong&gt;. &amp;ldquo;운영 코드와 테스트 설정의 경계&amp;quot;를 안전하게 보장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Spring IoC Container (Bean 관리 메커니즘)&lt;/li&gt;
&lt;li&gt;Spring Boot TestContext Framework&lt;/li&gt;
&lt;li&gt;Profile 기반 환경 분리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener"
&gt;Spring Framework @Configuration 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/TestConfiguration.html" target="_blank" rel="noopener"
&gt;Spring Boot @TestConfiguration 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;테스트 설정 패턴: &lt;code&gt;@MockitoBean&lt;/code&gt;, &lt;code&gt;@Import&lt;/code&gt;, &lt;code&gt;@ActiveProfiles&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Spring Cache 핵심 어노테이션 정리</title><link>https://b9f1.com/p/2025-08-30-spring-cache-core-annotation/</link><pubDate>Sat, 30 Aug 2025 13:12:30 +0900</pubDate><guid>https://b9f1.com/p/2025-08-30-spring-cache-core-annotation/</guid><description>&lt;img src="https://b9f1.com/p/2025-08-30-spring-cache-core-annotation/cover.png" alt="Featured image of post Spring Cache 핵심 어노테이션 정리" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;Spring Framework에서 캐싱은 데이터베이스 조회나 외부 API 호출처럼 &lt;strong&gt;비용이 큰 연산 결과를 저장&lt;/strong&gt;해두고 재사용할 수 있게 도와준다.&lt;/p&gt;
&lt;p&gt;이를 간단히 적용할 수 있는 방법이 바로 &lt;strong&gt;Spring Cache 어노테이션&lt;/strong&gt;(&lt;code&gt;@Cacheable&lt;/code&gt;, &lt;code&gt;@CachePut&lt;/code&gt;, &lt;code&gt;@CacheEvict&lt;/code&gt;)이다.&lt;/p&gt;
&lt;p&gt;이 세 가지 어노테이션의 차이점과 각각을 언제 사용하는 게 좋은지 정리한다.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="1-cacheable"&gt;1. @Cacheable
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;동작 방식&lt;/strong&gt;: 캐시에 값이 있으면 그대로 반환하고, 없으면 메서드를 실행 후 결과를 캐시에 저장한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;적절한 상황&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;조회 성능 최적화가 필요한 경우 (DB 조회, 외부 API 호출)&lt;/li&gt;
&lt;li&gt;결과가 자주 변하지 않고 재사용 가치가 큰 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시 코드&lt;/strong&gt;:
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Cacheable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cacheNames&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;books&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;#isbn&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;findBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-cacheput"&gt;2. @CachePut
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;동작 방식&lt;/strong&gt;: 항상 메서드를 실행하고, 실행 결과를 캐시에 저장한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;적절한 상황&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;업데이트가 발생했을 때 최신 결과를 캐시에 반영해야 할 때&lt;/li&gt;
&lt;li&gt;캐시 미스를 줄이기보다 캐시 동기화가 중요한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;주의점&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Cacheable&lt;/code&gt;과 같은 메서드에 함께 사용하는 것은 비추천 (동작 충돌 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시 코드&lt;/strong&gt;:
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@CachePut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cacheNames&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;books&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;#isbn&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;updateBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BookDescriptor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-cacheevict"&gt;3. @CacheEvict
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;동작 방식&lt;/strong&gt;: 캐시에서 특정 엔트리나 전체 엔트리를 제거한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;적절한 상황&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;데이터 삭제/갱신 후, 오래된 캐시를 반드시 무효화해야 할 때&lt;/li&gt;
&lt;li&gt;정기적으로 캐시를 초기화할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;옵션&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allEntries = true&lt;/code&gt;: 캐시 전체 삭제&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beforeInvocation = true&lt;/code&gt;: 메서드 실행 전 캐시 삭제 (예외 발생 시에도 캐시 정리 보장)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시 코드&lt;/strong&gt;:
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@CacheEvict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cacheNames&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;books&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;#isbn&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;deleteBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@CacheEvict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cacheNames&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;books&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allEntries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;clearCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;조회는 &lt;code&gt;@Cacheable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;갱신은 &lt;code&gt;@CachePut&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;삭제/무효화는 &lt;code&gt;@CacheEvict&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 세 가지를 상황에 맞게 조합하면, DB 부하를 줄이면서도 데이터 정합성을 유지하는 효율적인 캐싱 전략을 설계할 수 있다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java, Spring Boot 애플리케이션 기본 구조&lt;/li&gt;
&lt;li&gt;캐시(Cache)의 개념과 동작 원리&lt;/li&gt;
&lt;li&gt;Redis, Caffeine 등 Spring Cache 지원 캐시 제공자&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-framework/reference/integration/cache.html" target="_blank" rel="noopener"
&gt;Spring Framework Docs - Caching Abstraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://redis.io/docs/" target="_blank" rel="noopener"
&gt;Redis 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spring Boot Reference: &lt;code&gt;spring-boot-starter-cache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Spring 웹 보안 위협과 대응 전략</title><link>https://b9f1.com/p/2025-08-05-spring-web-security-threats-and-response-strategies/</link><pubDate>Tue, 05 Aug 2025 01:52:32 +0900</pubDate><guid>https://b9f1.com/p/2025-08-05-spring-web-security-threats-and-response-strategies/</guid><description>&lt;img src="https://b9f1.com/p/2025-08-05-spring-web-security-threats-and-response-strategies/cover.png" alt="Featured image of post Spring 웹 보안 위협과 대응 전략" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;Spring 기반 웹 애플리케이션을 개발하거나 운영할 때 반드시 고려해야 할 대표적인 4가지 보안 위협을 다뤄본다.&lt;/p&gt;
&lt;p&gt;CSRF, XSS, 세션 고정, JWT 탈취는 대부분의 웹 시스템에서 발생할 수 있는 위험이다.
각 공격의 특성과 Spring Security를 활용한 대응 전략을 정리하여 실제 서비스에 적용할 수 있는 인사이트를 알아보자.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="1-csrf-cross-site-request-forgery"&gt;1. CSRF (Cross-Site Request Forgery)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;공격 개요&lt;/strong&gt;: 사용자가 의도치 않게 공격자의 요청을 자신의 권한으로 서버에 보내게 하는 공격.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 로그인한 사용자가 의심 없는 사이트를 방문했는데, 그 사이트에 포함된 악성 스크립트가 사용자의 계정으로 돈을 송금하는 요청을 서버에 보냄.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Security 대응 전략&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@EnableWebSecurity&lt;/code&gt; 사용 시 기본적으로 CSRF 토큰이 활성화됨.&lt;/li&gt;
&lt;li&gt;HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 내에 CSRF 토큰을 자동 삽입하거나, JavaScript 요청에서는 &lt;code&gt;X-CSRF-TOKEN&lt;/code&gt; 헤더로 전달.&lt;/li&gt;
&lt;li&gt;API 서버의 경우 &lt;code&gt;csrf().disable()&lt;/code&gt; 후 토큰 기반 인증(JWT 등)으로 대체하는 경우가 많음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;csrf&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// API 서버라면 비활성화 가능&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authorizeHttpRequests&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="2-xss-cross-site-scripting"&gt;2. XSS (Cross-Site Scripting)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;공격 개요&lt;/strong&gt;: 클라이언트 브라우저에서 악성 JavaScript가 실행되도록 유도하는 공격.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 게시판에 &lt;code&gt;&amp;lt;script&amp;gt;alert('XSS');&amp;lt;/script&amp;gt;&lt;/code&gt; 삽입 시, 이를 읽은 다른 사용자의 브라우저가 스크립트를 실행함.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;대응 전략&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;출력 시 이스케이프&lt;/strong&gt;: JSP, Thymeleaf 등 템플릿 엔진은 기본적으로 HTML 이스케이프 적용.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Boot 내장 방어&lt;/strong&gt;: Thymeleaf는 &lt;code&gt;th:text=&amp;quot;${var}&amp;quot;&lt;/code&gt;로 출력 시 자동 escape.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON 출력 시&lt;/strong&gt;: XSS 필터 사용 필요 (예: &lt;code&gt;XssEscapeServletFilter&lt;/code&gt; 추가).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;입력 검증&lt;/strong&gt;도 병행 권장 (단, 출력 시 이스케이프는 항상 해야 함).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterRegistrationBean&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;XssEscapeServletFilter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;xssFilter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterRegistrationBean&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;XssEscapeServletFilter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;registrationBean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterRegistrationBean&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;registrationBean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XssEscapeServletFilter&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;registrationBean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;registrationBean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="3-세션-고정-공격-session-fixation"&gt;3. 세션 고정 공격 (Session Fixation)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;공격 개요&lt;/strong&gt;: 공격자가 세션 ID를 미리 지정한 뒤 피해자가 해당 세션으로 로그인하도록 유도.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 공격자가 &lt;code&gt;JSESSIONID=known_id&lt;/code&gt;로 피해자 브라우저를 설정한 뒤 로그인 유도 → 세션 탈취.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Security 대응 전략&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;로그인 성공 시 세션 ID를 새로 발급하도록 설정: &lt;code&gt;sessionFixation().newSession()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;기본적으로 Spring Security는 &lt;code&gt;changeSessionId()&lt;/code&gt; 정책을 사용 (Java EE 7+ 환경)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sessionManagement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sessionFixation&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;migrateSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 또는 newSession()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="4-jwt-탈취"&gt;4. JWT 탈취
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;공격 개요&lt;/strong&gt;: JWT가 노출되면 누구나 동일한 권한으로 API 요청 가능.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: HTTPS 미사용 환경에서 JWT가 탈취되어 악의적인 요청 발생.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;대응 전략&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTPS 필수&lt;/strong&gt;: 전송 시 암호화는 기본.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;토큰 저장 위치&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;localStorage&lt;/code&gt; → XSS에 취약하나 CSRF 안전.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpOnly Cookie&lt;/code&gt; → CSRF 취약하나 XSS에 안전. CSRF 방어 필수.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JWT 구성 보완&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exp&lt;/code&gt;(만료시간), &lt;code&gt;iat&lt;/code&gt;, &lt;code&gt;jti&lt;/code&gt; 등을 활용하여 재사용 방지.&lt;/li&gt;
&lt;li&gt;서버 측에서 블랙리스트 관리 로직 구현 (Redis 활용 등).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// JWT 사용 시 Filter에서 인증 구현 예시&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JwtAuthenticationFilter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OncePerRequestFilter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;protected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;doFilterInternal&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resolveToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jwtProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Authentication&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jwtProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityContextHolder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;p&gt;웹 보안은 단순히 설정으로 끝나지 않는다.&lt;/p&gt;
&lt;p&gt;아키텍처 설계 단계부터 공격 벡터를 고려하고, Spring Security를 활용해 방어 레이어를 체계적으로 구성해야 한다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTP의 Stateless 특성&lt;/li&gt;
&lt;li&gt;쿠키/세션/토큰 인증 방식&lt;/li&gt;
&lt;li&gt;Spring Security 설정 구조&lt;/li&gt;
&lt;li&gt;웹 브라우저의 Same-Origin 정책&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/index.html" target="_blank" rel="noopener"
&gt;Spring Security 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://owasp.org/www-project-top-ten/" target="_blank" rel="noopener"
&gt;OWASP Top 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html" target="_blank" rel="noopener"
&gt;CSRF in Spring Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://owasp.org/www-community/xss-prevention" target="_blank" rel="noopener"
&gt;XSS Prevention Cheat Sheet (OWASP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Spring MVC</title><link>https://b9f1.com/p/2025-05-18-spring-mvc-controller-and-restcontroller/</link><pubDate>Sun, 18 May 2025 15:20:00 +0900</pubDate><guid>https://b9f1.com/p/2025-05-18-spring-mvc-controller-and-restcontroller/</guid><description>&lt;img src="https://b9f1.com/p/2025-05-18-spring-mvc-controller-and-restcontroller/cover.png" alt="Featured image of post Spring MVC" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;Spring MVC는 클라이언트의 요청을 처리하고 응답을 반환하는 웹 프레임워크다.
이때 핵심적인 역할을 하는 것이 &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@RestController&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;두 어노테이션은 비슷해보이지만 응답 방식에서 중요한 차이를 가진다.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="요청-처리-흐름"&gt;요청 처리 흐름
&lt;/h3&gt;&lt;div class="mermaid-container zoomable"&gt;
&lt;pre class="mermaid"&gt;
sequenceDiagram
participant Client
participant DispatcherServlet
participant HandlerMapping
participant HandlerAdapter
participant Controller
participant ViewResolver
participant HttpMessageConverter
Client-&gt;&gt;DispatcherServlet: HTTP 요청
DispatcherServlet-&gt;&gt;HandlerMapping: 핸들러 탐색
HandlerMapping--&gt;&gt;DispatcherServlet: 핸들러 반환
DispatcherServlet-&gt;&gt;HandlerAdapter: 핸들러 실행 위임
HandlerAdapter-&gt;&gt;Controller: 메서드 실행
alt @Controller
Controller--&gt;&gt;HandlerAdapter: View 이름 반환
HandlerAdapter-&gt;&gt;ViewResolver: View 이름으로 View 객체 생성
ViewResolver--&gt;&gt;DispatcherServlet: View 객체 (HTML 포함)
else @RestController
Controller--&gt;&gt;HandlerAdapter: 객체 반환
HandlerAdapter-&gt;&gt;HttpMessageConverter: 객체를 JSON으로 직렬화
HttpMessageConverter--&gt;&gt;DispatcherServlet: 직렬화된 JSON
end
DispatcherServlet--&gt;&gt;Client: 응답 전송
&lt;/pre&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Client&lt;/code&gt;가 HTTP 요청을 하게 되면 &lt;code&gt;DispatcherServlet&lt;/code&gt;이 가로챔
&lt;ul&gt;
&lt;li&gt;모든 HTTP 요청은 &lt;code&gt;DispatcherServlet&lt;/code&gt;이 가로채며 시작된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt;은 &lt;code&gt;HandlerMapping&lt;/code&gt;을 통해 해당 요청을 처리할 Handler를 찾은 다음 HandlerAdapter에게 해당 핸들러를 실행하도록 위임한다.
&lt;ul&gt;
&lt;li&gt;실행을 위임한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HandlerAdapter&lt;/code&gt;는 &lt;code&gt;Controller&lt;/code&gt;의 메서드를 실행한다.
&lt;ul&gt;
&lt;li&gt;어떤 Handler가 됐든 &lt;code&gt;HandlerAdapter&lt;/code&gt;가 실제 메서드를 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@RestController&lt;/code&gt; 케이스의 Resolver 호출
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt; 어노테이션으로 등록된 메서드의 경우 &lt;code&gt;Controller&lt;/code&gt;가 반환한 View 이름과 Model 데이터를 기반으로 &lt;code&gt;DispatcherServlet&lt;/code&gt;이 &lt;code&gt;ViewResolver&lt;/code&gt;를 통해 View 객체를 생성한 뒤 이를 렌더링하여 응답을 생성한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ViewResolver&lt;/code&gt;는 단순히 View를 찾아주는 역할&lt;/li&gt;
&lt;li&gt;실제 렌더링은 View 객체가 수행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RestController&lt;/code&gt; 어노테이션으로 등록된 메서드가 반환한 객체는 &lt;code&gt;DispatcherServlet&lt;/code&gt; → &lt;code&gt;HandlerAdapter&lt;/code&gt; → &lt;code&gt;HttpMessageConverter&lt;/code&gt;를 통해 JSON을 생성한 뒤 &lt;code&gt;DispatcherServlet&lt;/code&gt;에게 전달한다.
&lt;ul&gt;
&lt;li&gt;직렬화 처리를 위임한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@RestController&lt;/code&gt; 케이스의 응답 반환
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt;의 경우 &lt;code&gt;ViewResolver&lt;/code&gt;는 View 이름에 해당하는 View 객체를 찾는 역할만 하고 해당 View 객체가 DispatcherServlet의 호출에 의해 실제 HTML을 렌더링해 클라이언트에 전달한다.
&lt;ul&gt;
&lt;li&gt;ViewResolver → View 객체 탐색&lt;/li&gt;
&lt;li&gt;View → HTML 렌더링&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RestController&lt;/code&gt;의 경우 &lt;code&gt;HttpMessageConverter&lt;/code&gt;는 객체를 JSON으로 직렬화만 하고 직렬화된 결과는 &lt;code&gt;DispatcherServelet&lt;/code&gt;을 통해 클라이언트에게 반환된다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt;이 응답의 시작과 끝을 담당하며 &lt;code&gt;HttpMessageConverter&lt;/code&gt;는 응답 본문 생성을 돕는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="controller"&gt;&lt;code&gt;@Controller&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;전통적인 MVC 구조에서 사용&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Model&lt;/code&gt;에 데이터를 담고 View 이름을 반환&lt;/li&gt;
&lt;li&gt;View Resolver가 View 템플릿을 렌더링하여 응답&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;span class="lnt"&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Controller&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloController&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Nine&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// templates/hello.html&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;JSON 응답을 위해 &lt;code&gt;@ResponseBody&lt;/code&gt;와 함께 사용
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;span class="lnt"&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Controller&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiController&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@ResponseBody&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;/api/hello&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;apiHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Hello from Controller!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="restcontroller"&gt;&lt;code&gt;@RestController&lt;/code&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;RESTful 웹 서비스에서 주로 사용&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Controller + @ResponseBody&lt;/code&gt;의 조합&lt;/li&gt;
&lt;li&gt;리턴값을 그대로 JSON 등으로 직렬화하여 Response Body로 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloRestController&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Hello, Nine!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="차이점-비교"&gt;차이점 비교
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구분 항목&lt;/th&gt;
&lt;th&gt;@Controller&lt;/th&gt;
&lt;th&gt;@RestController&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;리턴 타입&lt;/td&gt;
&lt;td&gt;View 이름 또는 ModelAndView 객체 / ResponseEntity 직접 직렬화한 데이터&lt;/td&gt;
&lt;td&gt;객체 또는 문자열 (자동 JSON 직렬화됨)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;사용 목적&lt;/td&gt;
&lt;td&gt;템플릿 렌더링 기반 웹 앱 (HTML) / 필요시 JSON 응답도 가능&lt;/td&gt;
&lt;td&gt;API 응답을 위한 JSON/데이터 전송용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;응답 처리&lt;/td&gt;
&lt;td&gt;ViewResolver를 통해 HTML 렌더링&lt;/td&gt;
&lt;td&gt;HttpMessageConverter를 통해 JSON 직렬화&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;조합 어노테이션&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@ResponseBody&lt;/code&gt; 필요&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@RestController&lt;/code&gt; 단독 사용 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt;는 View 기반 응답을 기본으로 하지만 &lt;code&gt;@ResponseBody&lt;/code&gt;나 &lt;code&gt;ResponseEntity&lt;/code&gt;를 사용하면 JSON 데이터도 응답할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RestController&lt;/code&gt;는 모든 메서드가 데이터(JSON 등) 응답을 기본으로 하며, API 서버 구현에 적합하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring MVC에서 클라이언트 요청을 처리하는 흐름을 이해하면, 상황에 맞는 어노테이션 선택이 쉬워진다. View 기반 웹 페이지와 RESTful API를 구분하여 설계하는 것이 핵심이다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MVC 디자인 패턴&lt;/li&gt;
&lt;li&gt;Servlet과 DispatcherServlet의 역할&lt;/li&gt;
&lt;li&gt;View Resolver, HttpMessageConverter 작동 원리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc" target="_blank" rel="noopener"
&gt;Spring MVC Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html" target="_blank" rel="noopener"
&gt;@RestController Javadoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.baeldung.com/spring-controller-vs-restcontroller" target="_blank" rel="noopener"
&gt;Baeldung - Controller vs RestController&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener"
&gt;Spring 공식 가이드 - RESTful Web Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Spring에서 AOP란</title><link>https://b9f1.com/p/2025-04-17-spring-aop-and-oop/</link><pubDate>Sun, 18 May 2025 15:20:00 +0900</pubDate><guid>https://b9f1.com/p/2025-04-17-spring-aop-and-oop/</guid><description>&lt;img src="https://b9f1.com/p/2025-04-17-spring-aop-and-oop/cover.png" alt="Featured image of post Spring에서 AOP란" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;Spring에서 OOP(Object Oriented Programming) 만큼이나 강조되는 AOP(Aspect Oriented Programming)은 언제, 왜 필요할까?&lt;/p&gt;
&lt;p&gt;또한 AOP와 OOP는 대립되는 개념이 아니라는 것.
서로를 보완하며 강력한 설계를 가능케 하는지 알아보자.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="왜-aop가-필요한가"&gt;왜 AOP가 필요한가?
&lt;/h3&gt;&lt;p&gt;Spring Framework의 핵심 철학은 POJO와 OOP 기반의 설계다.
하지만 서비스가 복잡해질수록 로깅, 트랜잭션, 보안 등 공통 관심사가 여기저기 흩어져 코드를 어지럽힌다.&lt;/p&gt;
&lt;p&gt;예를 들어 다음과 같은 로직을 생각해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Transactional&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;사용자 생성 시작&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toEntity&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;사용자 생성 완료&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;이 메서드는 핵심 기능 외에도 트랜잭션 처리, 로깅이라는 &lt;strong&gt;횡단 관심사(cross-cutting concerns)&lt;/strong&gt; 를 포함하고 있다.&lt;/p&gt;
&lt;p&gt;이러한 코드가 여러 메서드에 중복되면 유지보수와 확장성이 심각하게 저하된다.
AOP는 이런 문제를 해결하기 위해 등장했다.&lt;/p&gt;
&lt;h4 id="로그인-감사-로깅"&gt;로그인 감사 로깅
&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Aspect&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginLoggingAspect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Around&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;@annotation(com.example.annotation.Auditable)&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;logLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Throwable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;proceed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;[AUDIT] {} executed in {}ms&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSignature&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;사용자 정의 어노테이션 &lt;code&gt;@Auditable&lt;/code&gt;을 붙인 메서드에 감사 로깅이 적용된다.
핵심 로직과 분리되어 있기 때문에 유지보수가 쉬워지고 로직이 더 깔끔해진다.&lt;/p&gt;
&lt;h3 id="aop-vs-oop"&gt;AOP VS OOP
&lt;/h3&gt;&lt;p&gt;AOP와 OOP는 결코 대립하지 않는다.
오히려 상호 보완적이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OOP는 모듈화를 통해 도메인 개념을 캡슐화한다.&lt;/li&gt;
&lt;li&gt;AOP는 횡단 관심사를 모듈화하여 코드 중복을 제거한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AOP는 OOP만으로는 분리하기 어려운 공통 로직을 흩어지지 않게 모듈화하는 방식이다.
즉, AOP는 OOP의 약점을 보완한다.&lt;/p&gt;
&lt;h3 id="-재미있는-일화"&gt;💡 재미있는 일화
&lt;/h3&gt;&lt;p&gt;Spring 초창기에는 AOP가 XML 설정 기반으로 매우 복잡했지만 지금은 &lt;code&gt;@Aspect&lt;/code&gt; 어노테이션만으로 매우 간단하게 적용할 수 있다.&lt;/p&gt;
&lt;p&gt;JPA 트랜잭션 설정 없이 &lt;code&gt;@Transactional&lt;/code&gt; 하나만 붙였는데도 실제로 프록시 기반으로 트랜잭션이 관리된다는 사실을 알게 되었을 때, 마치 &amp;ldquo;마법 같다&amp;quot;는 반응이 많다.&lt;/p&gt;
&lt;h4 id="spring-aop의-초기-xml-설정의-복잡성"&gt;Spring AOP의 초기 XML 설정의 복잡성
&lt;/h4&gt;&lt;p&gt;Spring AOP의 초기 버전에서는 XML을 통해 AOP 설정을 해야 했다.
예를 들어 &lt;a class="link" href="https://www.digitalocean.com/community/tutorials/spring-aop-example-tutorial-aspect-advice-pointcut-joinpoint-annotations" target="_blank" rel="noopener"
&gt;DigitalOcean의 튜토리얼 - By Pankaj Kumar&lt;/a&gt;에서는 XML 기반 AOP 설정의 예시를 다음과 같이 보여준다.&lt;/p&gt;
&lt;p&gt;이러한 설정은 복잡하고 유지보수가 어려웠겠지.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;aop:aspect&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;employeeXMLConfigAspect&amp;#34;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;employeeXMLConfigAspectID&amp;#34;&lt;/span&gt; &lt;span class="na"&gt;order=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;aop:pointcut&lt;/span&gt; &lt;span class="na"&gt;expression=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;execution(* com.journaldev.spring.model.Employee.getName())&amp;#34;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;getNamePointcut&amp;#34;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;aop:around&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;employeeAroundAdvice&amp;#34;&lt;/span&gt; &lt;span class="na"&gt;pointcut-ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;getNamePointcut&amp;#34;&lt;/span&gt; &lt;span class="na"&gt;arg-names=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;proceedingJoinPoint&amp;#34;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id="transactional-어노테이션과-프록시-기반-트랜잭션-관리의-마법"&gt;&lt;code&gt;@Transactional&lt;/code&gt; 어노테이션과 프록시 기반 트랜잭션 관리의 &amp;ldquo;마법&amp;rdquo;
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;@Transactional&lt;/code&gt; 어노테이션을 사용하면 개발자는 명시적으로 트랜잭션을 시작하거나 종료하는 코드를 작성하지 않아도 된다.&lt;/p&gt;
&lt;p&gt;Spring은 내부적으로 프록시를 생성하여 트랜잭션을 관리한다.
이러한 동작은 개발자에게는 마치 &amp;ldquo;마법&amp;quot;처럼 느껴질 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.marcobehler.com/guides/spring-transaction-management-transactional-in-depth" target="_blank" rel="noopener"
&gt;Marco Behler의 블로그&lt;/a&gt;에서는 이러한 동작을 다음과 같이 설명한다.&lt;/p&gt;
&lt;link rel="stylesheet" href="https://b9f1.com/css/vendors/admonitions.5c21d3611305826ca76e50bf22bdda6ed74f2f81d26216e9166f9ae104f2e27a.css" integrity="sha256-XCHTYRMFgmynblC/Ir3abtdPL4HSYhbpFm&amp;#43;a4QTy4no=" crossorigin="anonymous"&gt;
&lt;div class="admonition quote"&gt;
&lt;div class="admonition-header"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"&gt;&lt;path d="M448 296c0 66.3-53.7 120-120 120l-8 0c-17.7 0-32-14.3-32-32s14.3-32 32-32l8 0c30.9 0 56-25.1 56-56l0-8-64 0c-35.3 0-64-28.7-64-64l0-64c0-35.3 28.7-64 64-64l64 0c35.3 0 64 28.7 64 64l0 32 0 32 0 72zm-256 0c0 66.3-53.7 120-120 120l-8 0c-17.7 0-32-14.3-32-32s14.3-32 32-32l8 0c30.9 0 56-25.1 56-56l0-8-64 0c-35.3 0-64-28.7-64-64l0-64c0-35.3 28.7-64 64-64l64 0c35.3 0 64 28.7 64 64l0 32 0 32 0 72z"/&gt;&lt;/svg&gt;
&lt;span&gt;Quote&lt;/span&gt;
&lt;/div&gt;
&lt;div class="admonition-content"&gt;
&lt;p&gt;&amp;ldquo;Now whenever you are using &lt;code&gt;@Transactional&lt;/code&gt; on a bean, Spring uses a tiny trick. It does not just instantiate a UserService, but also a transactional &lt;em&gt;proxy&lt;/em&gt; of that UserService.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;이제 빈에서 &lt;code&gt;@Transactional&lt;/code&gt;을 사용할 때마다 Spring은 작은 트릭을 사용합니다. 이는 단순히 사용자 서비스를 인스턴스화하는 것뿐만 아니라 해당 사용자 서비스의 트랜잭션 프록시도 사용합니다.&amp;rdquo;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class="link" href="https://stackoverflow.com/questions/1099025/spring-transactional-what-happens-in-background" target="_blank" rel="noopener"
&gt;Stack Overflow의 질문: Spring - @Transactional - What happens in background?&lt;/a&gt;에서도 이와 유사한 설명을 확인할 수 있었다.
무려 15년 전 질문이다.&lt;/p&gt;
&lt;div class="admonition quote"&gt;
&lt;div class="admonition-header"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"&gt;&lt;path d="M448 296c0 66.3-53.7 120-120 120l-8 0c-17.7 0-32-14.3-32-32s14.3-32 32-32l8 0c30.9 0 56-25.1 56-56l0-8-64 0c-35.3 0-64-28.7-64-64l0-64c0-35.3 28.7-64 64-64l64 0c35.3 0 64 28.7 64 64l0 32 0 32 0 72zm-256 0c0 66.3-53.7 120-120 120l-8 0c-17.7 0-32-14.3-32-32s14.3-32 32-32l8 0c30.9 0 56-25.1 56-56l0-8-64 0c-35.3 0-64-28.7-64-64l0-64c0-35.3 28.7-64 64-64l64 0c35.3 0 64 28.7 64 64l0 32 0 32 0 72z"/&gt;&lt;/svg&gt;
&lt;span&gt;Quote&lt;/span&gt;
&lt;/div&gt;
&lt;div class="admonition-content"&gt;
&lt;p&gt;&amp;ldquo;But at a very high level, Spring creates proxies for classes that declare &lt;code&gt;@Transactional&lt;/code&gt; on the class itself or on members. The proxy is mostly invisible at runtime. It provides a way for Spring to inject behaviors before, after, or around method calls into the object being proxied.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;매우 높은 수준에서 Spring은 클래스 자체 또는 멤버에 &lt;code&gt;@Transactional&lt;/code&gt;을 선언하는 클래스에 대한 프록시를 생성합니다. 프록시는 런타임에 대부분 보이지 않습니다. 이 프록시는 Spring이 메서드 호출 전후 또는 주변의 동작을 프록시 대상 객체에 주입할 수 있는 방법을 제공합니다.&amp;rdquo;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;&lt;p&gt;OOP는 설계의 뼈대, AOP는 설계의 윤활유다.
AOP는 복잡한 애플리케이션에서 반드시 필요한 설계 전략이다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java 언어 및 Spring Framework 기초&lt;/li&gt;
&lt;li&gt;DI(의존성 주입)과 Proxy 패턴 개념&lt;/li&gt;
&lt;li&gt;어노테이션 기반 설정 이해&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-framework/reference/core/aop.html" target="_blank" rel="noopener"
&gt;Spring AOP 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://eclipse.dev/aspectj/" target="_blank" rel="noopener"
&gt;AspectJ 소개&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;핵심 키워드: &lt;code&gt;@Aspect&lt;/code&gt;, &lt;code&gt;@Around&lt;/code&gt;, &lt;code&gt;JoinPoint&lt;/code&gt;, &lt;code&gt;cross-cutting concern&lt;/code&gt;, &lt;code&gt;Proxy&lt;/code&gt;, &lt;code&gt;Advice&lt;/code&gt;, &lt;code&gt;Pointcut&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Spring 핵심 철학</title><link>https://b9f1.com/p/2025-04-29-spring-core-philosophy/</link><pubDate>Tue, 29 Apr 2025 00:00:00 +0900</pubDate><guid>https://b9f1.com/p/2025-04-29-spring-core-philosophy/</guid><description>&lt;img src="https://b9f1.com/p/2025-04-29-spring-core-philosophy/cover.png" alt="Featured image of post Spring 핵심 철학" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;Spring Framework는 지금껏 사용해야 하니 필요한 만큼만 알아보고 사용할 수 있다면 그만이었다.
그게 프레임워크의 장점이기도 하지만 자세히 알고 다루는 게 당연히 좋을 것이다.&lt;/p&gt;
&lt;p&gt;Spring의 기본 철학과 그게 왜 중요한지 실제 코드에선 어떻게 드러나는지 정리해보고 싶어졌다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Framework는 &lt;strong&gt;POJO 기반 개발 철학&lt;/strong&gt;을 중심으로 복잡한 엔터프라이즈 애플리케이션을 단순화 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;객체지향 설계 원칙(SRP, SoC, DRY 등)&lt;/strong&gt; 을 자연스럽게 실현할 수 있도록 설계되어 클린 아키텍처의 이상을 구현한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;테스트 주도 개발(TDD)&lt;/strong&gt; 을 내재화하여 단위 테스트 및 통합 테스트가 손쉬운 구조를 지향한다.&lt;/li&gt;
&lt;li&gt;전통적인 Java EE와의 차별점은 단순한 기술적 비교를 넘어 &lt;strong&gt;철학적 차별화&lt;/strong&gt;로 설명할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="pojo-기반-개발---순수-자바의-진정한-의미"&gt;POJO 기반 개발 - 순수 자바의 진정한 의미
&lt;/h3&gt;&lt;p&gt;Spring은 POJO(Plain Old Java Object)라는 개념을 강조한다.&lt;/p&gt;
&lt;p&gt;그냥 평범한 자바 객체가 왜 중요한가.&lt;/p&gt;
&lt;p&gt;알고 보니 그 핵심은 프레임워크에 종속되지 않은 코드 작성이었다.
즉, Spring 없이도 돌아가는 순수 자바 객체를 만들어야 유지보수나 테스트가 더 쉬워진다는 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POJO의 핵심 특징
&lt;ul&gt;
&lt;li&gt;특별한 인터페이스/상속이 필요 없다.&lt;/li&gt;
&lt;li&gt;어노테이션 없이도 돌아가는 단순한 구조&lt;/li&gt;
&lt;li&gt;getter/setter만 있는 평범한 자바 객체&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자주 강조되는 부분은 비침투성(Non-Invasiveness)인데, 이건 &amp;ldquo;내 비즈니스 로직에 프레임워크 종속적인 코드를 심지 않아도 된다&amp;quot;는 뜻이다.&lt;/p&gt;
&lt;p&gt;정말 중요한 개념 같아서 메모해놨던 문장이다.&lt;/p&gt;
&lt;link rel="stylesheet" href="https://b9f1.com/css/vendors/admonitions.5c21d3611305826ca76e50bf22bdda6ed74f2f81d26216e9166f9ae104f2e27a.css" integrity="sha256-XCHTYRMFgmynblC/Ir3abtdPL4HSYhbpFm&amp;#43;a4QTy4no=" crossorigin="anonymous"&gt;
&lt;div class="admonition info"&gt;
&lt;div class="admonition-header"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"&gt;&lt;path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/&gt;&lt;/svg&gt;
&lt;span&gt;Info&lt;/span&gt;
&lt;/div&gt;
&lt;div class="admonition-content"&gt;
&lt;p&gt;Spring Framework의 핵심 원칙 중 하나는 &amp;lsquo;비침투성&amp;rsquo;입니다.&lt;/p&gt;
&lt;p&gt;비즈니스 로직이나 도메인 모델에 프레임워크 종속 클래스를 억지로 넣지 않아도 실행되어야 한다는 의미입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;직접 작성한 간단한 예제도 다시 떠올려 봤다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PaymentProcessor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;OrderService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PaymentProcessor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;paymentProcessor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;processOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Spring 없이도 동작하는 순수 자바코드. 이게 바로 Spring이 지향하는 방식이라는 걸 확실히 알게 됐다.&lt;/p&gt;
&lt;h4 id="pojo의-재밌는-일화"&gt;POJO의 재밌는 일화
&lt;/h4&gt;&lt;p&gt;&lt;a class="link" href="https://martinfowler.com/bliki/POJO.html" target="_blank" rel="noopener"
&gt;마틴 파울러 형님의 POJO 소개&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;**POJO (Plain Old Java Object)**는 &amp;ldquo;평범한 자바 객체&amp;quot;라는 의미의 약어입니다.&lt;/p&gt;
&lt;p&gt;이 용어는 2000년 9월, 저(마틴 파울러), 레베카 파슨스, 조쉬 매켄지가 한 컨퍼런스에서 발표를 준비하던 중에 만들어졌습니다.
그 발표에서는 &lt;strong&gt;비즈니스 로직을 Entity Bean 같은 복잡한 구조 대신, 일반 자바 객체에 담을 때 얻는 여러 이점&lt;/strong&gt;에 대해 이야기하려고 했습니다.
그런데 우리는 사람들이 왜 그렇게까지 &lt;strong&gt;일반 자바 객체 사용을 꺼려하는지&lt;/strong&gt; 의문이 들었고, 결론적으로 &amp;ldquo;그 객체들이 단지 이름이 멋지지 않기 때문&amp;quot;이라는 데 생각이 모였습니다.
그래서 우리가 이름을 하나 붙여줬고, 그 이름이 아주 잘 퍼져 나가게 된 것이죠.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="객체지향-설게-원칙"&gt;객체지향 설게 원칙
&lt;/h3&gt;&lt;p&gt;Spring의 또 다른 포인트는 객체지향 설계 원칙이었다.
사실 SOLID 원칙 같은 건 교과서적으로만 알고 있었는데 Spring 구조 안에서 그게 자연스럽게 드러난다는 걸 배웠다.&lt;/p&gt;
&lt;h4 id="drydont-repeat-yourself"&gt;DRY(Don&amp;rsquo;t Repeat Yourself)
&lt;/h4&gt;&lt;p&gt;중복 방지를 위해 AOP(관점지향 프로그래밍)를 활용하는 방식이 인상적이었다.&lt;/p&gt;
&lt;p&gt;단순히 기능적으로 쓸 수 있다는 게 아니라 반복되는 패턴을 추상화하고 코드의 관심사를 깔끔히 분리하려는 시도구나.&lt;/p&gt;
&lt;p&gt;예를 들어 트랜잭션 처리, 로깅 같은 건 매번 코드에 쓰지 않고 &lt;code&gt;@Transactional&lt;/code&gt;, &lt;code&gt;@Aspect&lt;/code&gt;로 공통화 하는 방식의 AOP를 도입하면 횡단 관심사를 코드 밖으로 꺼낼 수 있다.&lt;/p&gt;
&lt;h4 id="srpsingle-responsibility-principle"&gt;SRP(Single Responsibility Principle)
&lt;/h4&gt;&lt;p&gt;서비스, 컨트롤러, 레포지토리로 책임을 나누는 계층 구조 덕분에 코드가 깔끔하게 분리될 수 있다.
&amp;ldquo;변화의 이유가 하나여야 한다&amp;quot;는 SRP 원칙을 확실히 이해하고 넘어간다.&lt;/p&gt;
&lt;h4 id="socseparation-of-concerns"&gt;SoC(Separation of Concerns)
&lt;/h4&gt;&lt;p&gt;DI(의존성 주입), AOP 같은 개념이 결국 각자의 역할에 집중할 수 있게 돕는 도구라는 점도 정리해볼 수 있었다.
예를 들어 &lt;code&gt;@Aspect&lt;/code&gt;로 로깅은 별도로 떼어내고 서비스 로직은 비즈니스에만 집중할 수 있게 한다.&lt;/p&gt;
&lt;p&gt;예전에 소켓 통신 오류가 계속 발생하는 상황에 트러블 슈팅을 위해 어떤 방법이 있을까 고민해보고 찾아보다가 Aspect 클래스를 생성해서 메서드 실행은 건드리지 않고 내가 원하는 측정만 추가하는 방식이 필요했는데 그냥 쓰고 이게 되네 했던 순간보다 다시 알아보는 지금 &amp;ldquo;코드의 순수성&amp;quot;과 &amp;ldquo;변화 대응력&amp;quot;을 동시에 높이는 설계적인 해법이라서 신기하고 진짜 큰 가치구나 싶다.&lt;/p&gt;
&lt;h3 id="spring은-테스트를-위한-구조다"&gt;Spring은 테스트를 위한 구조다
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://b9f1.com/p/2025-04-29-spring-core-philosophy/image-1.png"
width="800"
height="708"
srcset="https://b9f1.com/p/2025-04-29-spring-core-philosophy/image-1_hu_961d8165fdfa6db4.png 480w, https://b9f1.com/p/2025-04-29-spring-core-philosophy/image-1_hu_6d3fd58f8e5d4d14.png 1024w"
loading="lazy"
alt="TDD 시각화"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="271px"
&gt;&lt;/p&gt;
&lt;p&gt;이건 체감이 정말 컸던 부분이다.
TDD는 테스트 환경 세팅이 어려운데 Spring은 POJO와 DI 덕분에 이게 정말 단순해진다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring에서 TDD 특징
&lt;ul&gt;
&lt;li&gt;컨테이너 없어도 단위 테스트 가능 (POJO 덕분!)&lt;/li&gt;
&lt;li&gt;의존성 주입 덕분에 Mocking이 간단&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@SpringBootTest&lt;/code&gt;로 통합 테스트도 손쉽게 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;테스트했던 가장 단순 코드 &lt;code&gt;@DisplayName&lt;/code&gt; 달아놨던.. 그래서 일관성 없이 어딘 달고 어딘 안 달고&amp;hellip;
메서드명을 한글로 사용해보자! 😊&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@DisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;기본 정보로 사용자 생성시 필수 필드가 올바르게 설정되어야 한다&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;createWithBasicInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserFixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createValidUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isNotNull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isNotNull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isNotNull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPassword&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isNotNull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCreatedAt&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isNotNull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUpdatedAt&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isNotNull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUpdatedAt&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isEqualTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCreatedAt&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getChannels&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProfileImageId&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;isNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@DisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;유효한 credentials로 로그인 시 UserResponse 반환&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;loginSuccess&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// given &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findByNameWithPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPassword&lt;/span&gt;&lt;span class="p"&gt;())).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ofNullable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// when &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginRequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Then &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isNotNull&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;usingRecursiveComparison&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEqualTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toUserResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;findByNameWithPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loginRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;RED:&lt;/strong&gt; 구현이 필요해?
&lt;ul&gt;
&lt;li&gt;테스트 작성하고 오류를 만나&lt;/li&gt;
&lt;li&gt;빨간줄이 내가 뭘 만들어야 하는지 알려주는 게 돼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GREEN:&lt;/strong&gt; 코드 작성 했어?
&lt;ul&gt;
&lt;li&gt;테스트를 돌려&lt;/li&gt;
&lt;li&gt;로직을 수정하고 필요한 걸 또 만들어&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REFACTOR:&lt;/strong&gt; 개선할 수 있겠는데?
&lt;ul&gt;
&lt;li&gt;클린 코드로 개선해보자&lt;/li&gt;
&lt;li&gt;변경하면서 다시 &lt;strong&gt;RED&lt;/strong&gt;를 만나&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TestContext Framework도 정말 유용하다.
트랜잭션 처리나 컨텍스트 초기화 같은 걸 알아서 해주니까 훨씬 간편하게 통합 테스트를 구성할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TestContext Framework의 주요 기능
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;컨텍스트 캐싱&lt;/strong&gt;: 테스트마다 매번 새 컨텍스트를 띄우면 느리니까, 같은 설정이면 재사용해서 속도를 최적화함.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DI 지원&lt;/strong&gt;: 테스트 클래스에 &lt;code&gt;@Autowired&lt;/code&gt; 같은 걸 쓸 수 있게 해줌.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;트랜잭션 관리&lt;/strong&gt;: 테스트가 끝난 후 자동으로 DB 롤백 → 깨끗한 상태 유지.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;이벤트 리스너/후크&lt;/strong&gt;: 테스트 실행 전후에 더 복잡한 작업(예: 컨텍스트 초기화)도 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="테스트-중심-개발을-유도하는-설계-철학"&gt;테스트 중심 개발을 유도하는 설계 철학
&lt;/h4&gt;&lt;p&gt;Spring은 처음부터 테스트 가능한 코드(testable code)를 중심에 두고 설계됐다.
다음과 같은 구조적 특징이 TDD를 촉진시킨다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POJO 기반 클래스 → 별도의 컨테이너 없이도 테스트 가능&lt;/li&gt;
&lt;li&gt;DI를 통한 구성 → 객체간 결합도 감소 → 단위 테스트 용이&lt;/li&gt;
&lt;li&gt;설정과 환경 분리 → 테스트 대상 코드의 독립성 확보&lt;/li&gt;
&lt;li&gt;모듈화된 아키텍처 → 책임과 기능 분리 → 테스트 대상을 명확히 구분 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;단순히 테스트가 가능한 수준을 넘어서 테스트 주도 개발을 실질적으로 적용하고 유지할 수 있는 환경을 제공한다는 점에서 의미가 크다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;객체지향 기본 개념&lt;/li&gt;
&lt;li&gt;JUnit 기본 사용법&lt;/li&gt;
&lt;li&gt;Mockito 사용 경험&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;POJO란 무엇인가?&lt;/li&gt;
&lt;li&gt;테스트 주도 개발 개념&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener"
&gt;Spring 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Spring Boot와 웹서버</title><link>https://b9f1.com/p/2025-04-28-springboot-and-web-servers/</link><pubDate>Mon, 28 Apr 2025 00:00:00 +0900</pubDate><guid>https://b9f1.com/p/2025-04-28-springboot-and-web-servers/</guid><description>&lt;img src="https://b9f1.com/p/2025-04-28-springboot-and-web-servers/cover.png" alt="Featured image of post Spring Boot와 웹서버" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;웹 서버와 WAS의 차이점을 명확히 이해하고 Spring Boot의 내장 톰캣이 어떤 역할을 하는지 알아본다.
또한, Spring Boot에서 사용되는 다양한 Bean 등록 방법과 각각의 장단점을 비교 분석한다.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="web-server-vs-web-application-server"&gt;Web Server VS Web Application Server
&lt;/h3&gt;&lt;h4 id="웹-서버web-server"&gt;웹 서버(Web Server)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;정적 콘텐츠(HTML, CSS, JS, 이미지 등)을 제공하는 서버&lt;/li&gt;
&lt;li&gt;클라이언트의 요청을 받아 파일 시스템의 리소스를 반환&lt;/li&gt;
&lt;li&gt;동적 처리 불가능 WAS와 연동 필요&lt;/li&gt;
&lt;li&gt;예: Nginx, Apache HTTP Server 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="웹-애플리케이션-서버web-application-server"&gt;웹 애플리케이션 서버(Web Application Server)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;편하게 &amp;lsquo;와쓰&amp;rsquo;라고 발음하는 경우가 많다.&lt;/li&gt;
&lt;li&gt;동적 콘텐츠(비즈니스 로직, DB 연동)를 처리하는 서버&lt;/li&gt;
&lt;li&gt;서블릿 컨테이너를 포함해 애플리에킹션 실행 환경 제공&lt;/li&gt;
&lt;li&gt;웹 서버의 기능도 일부 포함 가능 (단, 정적 리소스 처리 효율성이 떨어짐)&lt;/li&gt;
&lt;li&gt;예: Tomcat, Jetty 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="주요-차이점"&gt;주요 차이점
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구분&lt;/th&gt;
&lt;th&gt;웹 서버&lt;/th&gt;
&lt;th&gt;WAS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;역할&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;정적 콘텐츠 제공&lt;/td&gt;
&lt;td&gt;동적 콘텐츠 처리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;예시&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Nginx, Apache&lt;/td&gt;
&lt;td&gt;Tomcat, Jetty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;성능&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;정적 파일 처리 최적화&lt;/td&gt;
&lt;td&gt;애플리케이션 로직 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;보안&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;리버스 프록시, 로드 밸런싱&lt;/td&gt;
&lt;td&gt;세션 관리, 트랜잭션 처리&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="spring-boot의-내장-톰캣은-was"&gt;Spring Boot의 내장 톰캣은 WAS
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Spring Boot는 내장형 톰캣을 기본으로 제공한다.
&lt;ul&gt;
&lt;li&gt;별도의 WAS 설치 없이 실행이 가능하단 소리다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring-boot-starter-web&lt;/code&gt; 의존성 추가 시 자동 구성된다.&lt;/li&gt;
&lt;li&gt;WAS로 동작하지만 정적 리소스도 처리 가능하다. (개발용으로 충분)&lt;/li&gt;
&lt;li&gt;프로덕션 환경에서는 Nginx + Spring Boot(Tomcat) 등 조합을 사용하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="spring-boot에서-bean-등록-방법-비교"&gt;Spring Boot에서 Bean 등록 방법 비교
&lt;/h3&gt;&lt;h4 id="컴포넌트-스캔"&gt;컴포넌트 스캔
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Service&lt;/code&gt;, &lt;code&gt;Repository&lt;/code&gt;, &lt;code&gt;@Controller&lt;/code&gt; 등 어노테이션으로 간단히 빈 등록이 가능하다. 명확한 케이스를 나타내는 어노테이션을 사용하는데, 대부분 &lt;code&gt;@Component&lt;/code&gt;를 상속 받고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;장점:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;간편한 등록 &lt;code&gt;@Component&lt;/code&gt; 및 하위 어노테이션 자동 감지&lt;/li&gt;
&lt;li&gt;의존성 자동 주입 &lt;code&gt;@Autowired&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;명시적 제어 불가능&lt;/li&gt;
&lt;li&gt;모든 빈이 스캔되므로 불필요한 빈이 등록될 수 있다.&lt;/li&gt;
&lt;li&gt;커스터마이징이 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="자바-설정-클래스"&gt;자바 설정 클래스
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt; + &lt;code&gt;@Bean&lt;/code&gt; 조합으로 명시적 등록 방법&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;myService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyServiceImpl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;장점:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;명시적 빈 등록&lt;/li&gt;
&lt;li&gt;필요한 빈만 선택적으로 등록 가능&lt;/li&gt;
&lt;li&gt;외부 라이브러리 빈 등록에 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;수동 등록이 번거로울 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="import를-이용한-빈-등록"&gt;Import를 이용한 빈 등록
&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Import&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;DatabaseConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SecurityConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;장점:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;모듈화된 설정 관리 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;의존성 관계가 명확하지 않을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="xml-기반-빈-등록"&gt;XML 기반 빈 등록
&lt;/h4&gt;&lt;p&gt;legacy한 기술이라서 &amp;ldquo;이런 방법이 있구나&amp;rdquo; 정도만 이해하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;myService&amp;#34;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;com.example.MyServiceImpl&amp;#34;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;장점:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;레거시 시스템과 호환성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;가독성이 떨어진다.&lt;/li&gt;
&lt;li&gt;유지보수가 어렵다.&lt;/li&gt;
&lt;li&gt;최신 Spring에 권장되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="최적의-방법은"&gt;최적의 방법은?
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;컴포넌트 스캔: 일반적인 애플리케이션 빈 등록&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Bean&lt;/code&gt; 수동 등록: 외부 라이브러리, 커스텀 설정 필요 시&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Import&lt;/code&gt;: 설정 분리 시 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Servlet Container: 웹 애플리케이션 실행 환경
&lt;ul&gt;
&lt;li&gt;예: Tomcat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DI(Dependency Injection): Spring의 핵심 개념, 빈 간의 의존성 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-boot/how-to/webserver.html#page-title" target="_blank" rel="noopener"
&gt;Spring 공식 문서 - Embedded Web Servers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Spring 왜 태어났을까?</title><link>https://b9f1.com/p/2025-04-21-spring-why-was-the-spring-framework-born/</link><pubDate>Mon, 21 Apr 2025 00:00:00 +0900</pubDate><guid>https://b9f1.com/p/2025-04-21-spring-why-was-the-spring-framework-born/</guid><description>&lt;img src="https://b9f1.com/p/2025-04-21-spring-why-was-the-spring-framework-born/cover.png" alt="Featured image of post Spring 왜 태어났을까?" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;초기의 Java EE는 견고하고 강력한 구조를 제공했지만, 개발자들의 손과 발을 묶는 복잡성과 과도한 설정으로 악명 높았다.&lt;/p&gt;
&lt;p&gt;이러한 무거움에서 벗어나기 위해 등장한 것이 Spring Framework.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;제어의 주체가 누구인가&amp;quot;라는 핵심 개념을 중심으로 알아본다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Framework가 등장한 배경과 해결하고자 했던 문제점&lt;/li&gt;
&lt;li&gt;프레임워크와 라이브러리의 구조적차이&lt;/li&gt;
&lt;li&gt;Spring Framework와 일반 Java 라이브러리의 예시&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="java-ee-시대의-불편함"&gt;Java EE 시대의 불편함
&lt;/h3&gt;&lt;p&gt;2000년대 초 Java EE(Enterprise Edition)는 대규모 애플리케이션을 위한 표준으로 자리잡고 있었다.
하지만 실무에서 이를 사용하는 개발자들은 다음과 같은 고통을 겪고 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EJB&lt;/code&gt;(Enterprise JavaBeans)의 과도한 복잡성&lt;/li&gt;
&lt;li&gt;무거운 XML 설정과 보일러플레이트 코드&lt;/li&gt;
&lt;li&gt;느린 배포 및 테스트 주기&lt;/li&gt;
&lt;li&gt;객체 간 의존성 주입이 어렵고 테스트 불가능한 구조&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, 코드보다 설정이 많고 유연성이 떨어지며 단위 테스트가 거의 불가능한 환경이었다.&lt;/p&gt;
&lt;h3 id="spring의-등장"&gt;Spring의 등장
&lt;/h3&gt;&lt;p&gt;2003년 Rod Johnson은 저서 Expert One-on-One J2EE Design and Development에서 Spring Framework의 기반이 되는 아이디어를 처음 공개했다.&lt;/p&gt;
&lt;p&gt;핵심 철학은 간단했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;복잡한 EJB 대신 가볍고 유연한 구조로 Java 애플리케이션을 개발하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="spring의-해결책"&gt;Spring의 해결책
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;문제점&lt;/th&gt;
&lt;th&gt;Spring의 접근&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EJB의 무거움&lt;/td&gt;
&lt;td&gt;Plain Old Java Object(POJO) 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XML 기반 설정&lt;/td&gt;
&lt;td&gt;어노테이션 기반 설정, Java Config&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;결합도 높은 코드&lt;/td&gt;
&lt;td&gt;DI(Dependency Injection)로 느슨한 결합&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;테스트 어려움&lt;/td&gt;
&lt;td&gt;IoC 컨테이너로 유닛 테스트 용이성 확보&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Spring은 이러한 철학을 바탕으로 다음 두 가지 설계 원칙을 채택한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IoC(Inversion of Control)
&lt;ul&gt;
&lt;li&gt;객체의 생명주기와 의존성 관리를 프레임워크가 담당&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AOP(Aspect Oriented Programming)
&lt;ul&gt;
&lt;li&gt;공통 관심사를 분리하여 핵심 로직에 집중&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="프레임워크와-라이브러리의-결정적-차이"&gt;프레임워크와 라이브러리의 결정적 차이
&lt;/h3&gt;
&lt;div class="admonition info"&gt;
&lt;div class="admonition-header"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"&gt;&lt;path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/&gt;&lt;/svg&gt;
&lt;span&gt;Info&lt;/span&gt;
&lt;/div&gt;
&lt;div class="admonition-content"&gt;
&lt;p&gt;누가 제어권을 갖는가&lt;/p&gt;
&lt;p&gt;프레임 워크는 개발자의 코드를 호출하고 라이브러리는 개발자가 라이브러리를 호출한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id="framework"&gt;Framework
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개발자가 프레임워크 규칙에 따라 코드를 작성&lt;/li&gt;
&lt;li&gt;제어 흐름은 프레임워크가 주도&lt;/li&gt;
&lt;li&gt;개발자는 Hook Point만 제공&lt;/li&gt;
&lt;li&gt;예: Spring Framework는 개발자가 직접 인스턴스를 생성하지 않고, 스프링 컨테이너가 주도하여 객체 생성 및 주입&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserRepository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserRepository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Spring이 DI로 주입&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id="library"&gt;Library
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;개발자가 직접 라이브러리를 호출하고 사용하는 방식&lt;/li&gt;
&lt;li&gt;제어 흐름의 주도권은 개발자에게 있음&lt;/li&gt;
&lt;li&gt;예: Apache Commons, Gson, Log4j 등은 필요할 때 개발자가 직접 호출&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Gson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;25&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id="spring-vs-일반-java-라이브러리"&gt;Spring VS 일반 Java 라이브러리
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;항목&lt;/th&gt;
&lt;th&gt;Spring Framework&lt;/th&gt;
&lt;th&gt;Java 라이브러리&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;예시&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Autowired&lt;/code&gt;, &lt;code&gt;@Transactional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Gson&lt;/code&gt;, &lt;code&gt;Apache Commons IO&lt;/code&gt;, &lt;code&gt;JDBC&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;제어 흐름&lt;/td&gt;
&lt;td&gt;Spring이 주도 (IoC 컨테이너)&lt;/td&gt;
&lt;td&gt;개발자가 직접 호출&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;의존성 관리&lt;/td&gt;
&lt;td&gt;자동 주입 (DI)&lt;/td&gt;
&lt;td&gt;수동 인스턴스 생성&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;단위 테스트&lt;/td&gt;
&lt;td&gt;Mocking/Bean 주입으로 용이&lt;/td&gt;
&lt;td&gt;의존성 분리 어려움&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IoC (Inversion of Control)&lt;/strong&gt;: 객체 생성과 의존성 주입을 프레임워크에 위임&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DI (Dependency Injection)&lt;/strong&gt;: 필요한 객체를 외부에서 주입받는 설계 방식&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AOP (Aspect-Oriented Programming)&lt;/strong&gt;: 공통 관심사(예: 로깅, 트랜잭션)를 핵심 로직과 분리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Expert One-on-One J2EE Design and Development - Rod Johnson&lt;/li&gt;
&lt;li&gt;Spring 공식 문서: &lt;a class="link" href="https://spring.io/docs" target="_blank" rel="noopener"
&gt;https://spring.io/docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Spring VS Spring Boot</title><link>https://b9f1.com/p/2025-04-19-spring-vs-springboot/</link><pubDate>Sat, 19 Apr 2025 12:00:00 +0900</pubDate><guid>https://b9f1.com/p/2025-04-19-spring-vs-springboot/</guid><description>&lt;img src="https://b9f1.com/p/2025-04-19-spring-vs-springboot/cover.png" alt="Featured image of post Spring VS Spring Boot" /&gt;&lt;h2 id="개요"&gt;📌개요
&lt;/h2&gt;&lt;p&gt;&amp;ldquo;Spring과 Spring Boot는 뭐가 다르지?&amp;rdquo; 백엔드 개발을 배우기 시작하면 누구나 한 번쯤은 이 질문을 던진다. 이 글에선 Spring과 Spring Boot의 개념적 차이와 각자의 장단점을 정리하고, 실제 개발에서 어떤 상황에 어떤 것을 쓰는 게 맞는지 판단할 수 있는 기준을 다룬다. &lt;strong&gt;Spring Boot는 Spring을 완전히 대체하는 것이 아니라, 더 쉽게 활용할 수 있게 돕는 프레임워크라는 점이 핵심&lt;/strong&gt;이다.&lt;/p&gt;
&lt;h2 id="내용"&gt;📌내용
&lt;/h2&gt;&lt;h3 id="spring이란"&gt;Spring이란?
&lt;/h3&gt;&lt;p&gt;Spring은 자바 기반의 &lt;strong&gt;대형 애플리케이션 프레임워크&lt;/strong&gt;로, 주된 목표는 &lt;strong&gt;기업용 애플리케이션 개발에서의 복잡성을 줄이는 것&lt;/strong&gt;이다. 다음과 같은 특징이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DI (Dependency Injection)&lt;/strong&gt;: 객체 간의 의존성을 느슨하게 관리.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AOP (Aspect-Oriented Programming)&lt;/strong&gt;: 횡단 관심사(로깅, 보안 등)를 분리.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;트랜잭션 관리, 데이터 접근 (JDBC, ORM)&lt;/strong&gt; 등 다양한 엔터프라이즈 기능 지원.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;장점은 유연성과 확장성인데, &lt;strong&gt;단점은 설정이 복잡&lt;/strong&gt;하고 XML 또는 자바 기반의 방대한 설정 파일을 직접 작성해야 했다는 점이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="spring-boot란"&gt;Spring Boot란?
&lt;/h3&gt;&lt;p&gt;Spring Boot는 &lt;strong&gt;&amp;ldquo;Spring의 생산성을 혁신적으로 끌어올리기 위해 등장한 프레임워크&amp;rdquo;&lt;/strong&gt; 다. 쉽게 말하면, Spring을 더 쉽게 쓰게 해주는 &lt;strong&gt;Spring의 확장판&lt;/strong&gt;이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;자동 설정(Auto Configuration)&lt;/strong&gt;: 필요한 설정을 자동으로 감지.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;내장 WAS 제공&lt;/strong&gt;: 톰캣, 제티 등을 내장해서 배포가 간편.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;starter 의존성&lt;/strong&gt;: &lt;code&gt;spring-boot-starter-*&lt;/code&gt;로 대표되는 의존성 관리 패키지 제공.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;운영툴 내장&lt;/strong&gt;: 헬스체크, 메트릭 등 운영 편의성 향상.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="어떤-관계일까"&gt;어떤 관계일까?
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Spring Boot는 &lt;strong&gt;Spring 프레임워크 위에서 동작&lt;/strong&gt;한다.&lt;/li&gt;
&lt;li&gt;Spring이 없으면 Spring Boot도 존재할 수 없다.&lt;/li&gt;
&lt;li&gt;쉽게 말하면, Spring Boot는 &lt;strong&gt;Spring의 사용성을 높여주는 껍데기(Wrapper)&lt;/strong&gt; 라고 보면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구분&lt;/th&gt;
&lt;th&gt;Spring&lt;/th&gt;
&lt;th&gt;Spring Boot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;초기 설정&lt;/td&gt;
&lt;td&gt;수동 설정 (XML, Java Config)&lt;/td&gt;
&lt;td&gt;자동 설정, Starter 의존성&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;웹 서버&lt;/td&gt;
&lt;td&gt;별도 설치 필요&lt;/td&gt;
&lt;td&gt;내장 톰캣 등 제공&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;개발 생산성&lt;/td&gt;
&lt;td&gt;설정 주도&lt;/td&gt;
&lt;td&gt;빠른 개발 &amp;amp; 운영 편의성&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;진입 장벽&lt;/td&gt;
&lt;td&gt;높음&lt;/td&gt;
&lt;td&gt;낮음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;주요 용도&lt;/td&gt;
&lt;td&gt;복잡한 엔터프라이즈 시스템&lt;/td&gt;
&lt;td&gt;빠른 프로토타이핑, 마이크로서비스 등&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="왜-spring-boot가-탄생했나"&gt;왜 Spring Boot가 탄생했나?
&lt;/h3&gt;&lt;p&gt;Spring의 유연성은 좋았지만 &lt;strong&gt;개발자들이 너무 많은 설정에 지쳐 갔다.&lt;/strong&gt; 당시 루비 온 레일즈(Ruby on Rails) 같은 프레임워크가 &amp;ldquo;관습이 코드보다 우선한다(Convention over Configuration)&amp;ldquo;라는 철학으로 큰 인기를 끌면서, Spring 진영도 더 생산적인 개발 환경을 고민하게 됐다. 그 결과물이 바로 Spring Boot다.&lt;/p&gt;
&lt;h3 id="언제-어떤-걸-써야-할까"&gt;언제 어떤 걸 써야 할까?
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring만 사용하는 경우&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이미 사내 표준화된 Spring 환경이 있고, 커스텀한 설정이 중요한 레거시 시스템.&lt;/li&gt;
&lt;li&gt;직접 세밀하게 설정을 제어해야 하는 경우.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spring Boot를 사용하는 경우&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빠르게 서비스를 런칭해야 하는 스타트업, 프로토타입 개발.&lt;/li&gt;
&lt;li&gt;마이크로서비스 아키텍처처럼 독립적 서비스가 많은 구조.&lt;/li&gt;
&lt;li&gt;DevOps/운영 환경에서 헬스체크, 메트릭 등 운영 편의성을 중요하게 여기는 경우.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="spring-boot의-한계"&gt;Spring Boot의 한계
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;내부가 워낙 자동화돼 있어서 &lt;strong&gt;초보자일 땐 &amp;lsquo;왜 이렇게 동작하지?&amp;lsquo;라는 혼란이 올 수 있음.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;필요 이상으로 불필요한 의존성이 포함될 때도 있어서, &lt;strong&gt;프로젝트 규모가 커질수록 최적화와 경량화가 필요&lt;/strong&gt;함.&lt;/li&gt;
&lt;li&gt;내장 톰캣 등을 사용하는 경우 컨테이너 기반 환경에서는 커스텀 설정이 까다로울 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="springboot-살짝-뜯어보기"&gt;SpringBoot 살짝 뜯어보기
&lt;/h3&gt;&lt;h4 id="메인-클래스의-역할"&gt;메인 클래스의 역할
&lt;/h4&gt;&lt;p&gt;Spring Boot 애플리케이션은 &lt;code&gt;public static void main(String[] args)&lt;/code&gt; 메서드를 진입점으로 실행되며 이 메인 클래스가 Spring Boot 실행 구조의 출발점이자 전체 설정 및 컴포넌트 구성을 담당하는 핵심 위치를 차지한다.&lt;/p&gt;
&lt;h5 id="main-메서드의-역할"&gt;&lt;code&gt;main()&lt;/code&gt; 메서드의 역할
&lt;/h5&gt;&lt;p&gt;Java Application의 진입점은 &lt;code&gt;main()&lt;/code&gt; 메서드이며 Spring Boot도 예외는 아니다.
Spring Boot에서는 이 메서드 내부에서 다음과 같은 방식으로 애플리케이션을 시작한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@SpringBootApplication&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApplication&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SpringApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpringApplication.run(...)&lt;/code&gt;은 스프링 컨테이너를 초기화하고 내장 서버(Tomcat 등)을 구동하며 전체 애플리케이션을 실행하는 메서드&lt;/li&gt;
&lt;li&gt;이 호출은 결국 ApplicationContext 생성, 설정파일 로딩, 자동 구성 처리, 컴포넌트 스캔 등의 일련의 과정을 시작한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt; 메서드가 있는 클래스는 보통 구성의 기준점이 되는 루트 패키지에 위치시켜 이후 컴포넌트 탐색 및 의존성 주입의 범위를 결정하는데 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="springbootapplication"&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;Spring은 처음엔 너무 방대해서 &lt;strong&gt;DI, AOP 같은 핵심 개념만 뽑아서 작은 프로젝트에 적용&lt;/strong&gt;해봤다.
Spring Boot는 공식 문서의 &lt;strong&gt;Getting Started&lt;/strong&gt;를 따라하면서 구조를 눈에 익히고, 실제로 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 어노테이션이 내부적으로 어떤 동작을 하는지 코드를 따라가 보면서 깊이 이해해 보는 것에 도전했다.&lt;/p&gt;
&lt;p&gt;처음 SpringBoot 프로젝트를 생성하면 &lt;code&gt;@SpringBootApplication&lt;/code&gt;이라는 어노테이션이 보인다.
이 한 줄이 모든 걸 시작하게 만들지만 대부분은 단순히 &amp;ldquo;부트스트랩용 어노테이션&amp;rdquo; 정도로만 알고 넘어간다. 하지만 실제 동작 원리를 이해해야 Spring Boot의 진짜 힘을 느낄 수 있다.&lt;/p&gt;
&lt;h4 id="springbootapplication은-뭘-감싸고-있나"&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;은 뭘 감싸고 있나?
&lt;/h4&gt;&lt;p&gt;사실 이건 복합 구성(Meta-Annotation)으로 세 가지 주요 어노테이션을 묶고 있다.&lt;/p&gt;
&lt;div class="mermaid-container zoomable"&gt;
&lt;pre class="mermaid"&gt;
graph TD
A["@SpringBootApplication"]
A --&gt; B["@ComponentScan"]
A --&gt; C["@SpringBootConfiguration"]
C --&gt; C1["@Configuration"]
C1 --&gt; C2["@Component"]
A --&gt; D["@EnableAutoConfiguration"]
D --&gt; D1["@Import"]
D --&gt; D2["@AutoConfigurationPackage"]
D2 --&gt; D3["@Import"]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@Target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ElementType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Retention&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RetentionPolicy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;RUNTIME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Documented&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Inherited&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@SpringBootConfiguration&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@EnableAutoConfiguration&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nd"&gt;@ComponentScan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;excludeFilters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CUSTOM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TypeExcludeFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CUSTOM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AutoConfigurationExcludeFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SpringBootApplication&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id="springbootconfiguration"&gt;&lt;code&gt;@SpringBootConfiguration&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;말 그대로 스프링 설정 파일 역할을 한다.
이건 &lt;code&gt;@Configuration&lt;/code&gt;의 확장판이다.
즉, 이 클래스가 빈 설정의 진입점임을 알려준다.&lt;/p&gt;
&lt;h4 id="enableautoconfiguration"&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;Spring Boot의 핵심 기능.
자동 설정을 활성화해서 클래스패스에 있는 라이브러리와 환경에 따라 필요한 설정을 자동으로 구성한다.
이건 내부적으로 &lt;code&gt;spring.factories&lt;/code&gt; 파일을 통해 각종 &lt;code&gt;AutoConfiguration&lt;/code&gt; 클래스를 로딩한다.&lt;/p&gt;
&lt;h4 id="componentscan"&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;현재 패키지를 기준으로 빈 검색을 시작한다.
컨트롤러, 서비스 등을 &lt;code&gt;@Component&lt;/code&gt; 계열로 붙이면 이게 알아서 찾아 등록해준다.&lt;/p&gt;
&lt;h4 id="실행-흐름-시각화"&gt;실행 흐름 시각화
&lt;/h4&gt;&lt;p&gt;위에서 살펴본 메인 클래스와 &lt;code&gt;@SpringBootApplication&lt;/code&gt;의 세 가지 구성 요소는 애플리케이션 실행 시 정해진 순서와 구조에 따라 동작한다.&lt;/p&gt;
&lt;div class="mermaid-container zoomable"&gt;
&lt;pre class="mermaid"&gt;
flowchart TD
A["public static void main"] --&gt; B["SpringApplication.run(...)"]
B --&gt; C["@SpringBootApplication"]
C --&gt; D_sub
D_sub --&gt; E["ApplicationContext 초기화"]
E --&gt; F["내장 Tomcat 등 서버 구동"]
F --&gt; G["클라이언트 요청 대기 상태 진입"]
subgraph D_sub [구성 어노테이션]
DA["@EnableAutoConfiguration"]
DB["@ComponentScan"]
DC["@SpringBootConfiguration"]
end
&lt;/pre&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt; : 애플리케이션의 단순한 진입점이 아니라 Spring Boot 전체 실행의 기준점&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringApplication.run()&lt;/code&gt; : 실행 컨텍스트 구성, 리스너 등록, 설정 파일 로딩 등 수행&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; : 클래스패스를 기반으로 설정 후보 자동 로딩 및 적용&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ComponentScan&lt;/code&gt; : 지정된 패키지에서 컴포넌트(@Component, @Service 등) 자동 탐색&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@SpringBootConfiguration&lt;/code&gt; : Java 기반 설정 클래스 등록. 수동 Bean 정의에 사용&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApplicationContext&lt;/code&gt; 초기화 : 의존성 주입 및 라이프사이클 콜백 수행&lt;/li&gt;
&lt;li&gt;내장 서버 실행 : 기본 포트(8080)에서 HTTP 요청을 수신할 수 있는 상태로 전환됨&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 흐름은 단순히 외워야 할 절차가 아니라, &lt;strong&gt;설정 누락, 컴포넌트 인식 실패, 자동 설정 충돌&lt;/strong&gt; 등의 문제를 디버깅할 때 반드시 이해하고 있어야 하는 구조이다.&lt;/p&gt;
&lt;h2 id="결론"&gt;🎯결론
&lt;/h2&gt;
&lt;div class="admonition info"&gt;
&lt;div class="admonition-header"&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"&gt;&lt;path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/&gt;&lt;/svg&gt;
&lt;span&gt;Info&lt;/span&gt;
&lt;/div&gt;
&lt;div class="admonition-content"&gt;
&lt;p&gt;Spring Boot는 단순한 대체제가 아니라 Spring을 쉽고 빠르게 활용하도록 돕는 파트너다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;이번 포스팅을 통해 Spring과 Spring Boot의 관계를 명확히 이해하고, &lt;code&gt;@SpringBootApplication&lt;/code&gt; 내부의 작동 방식을 직접 따라가 본 경험으로, 단순 사용자가 아니라 &lt;strong&gt;이해하고 제어할 줄 아는 개발자로 한 걸음 성장했다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;다음 단계로는 Spring Boot의 자동 설정(AutoConfiguration) 메커니즘을 더 깊이 파고들어, 커스텀 자동 설정을 만드는 방법까지 알아보면 좋겠다.&lt;/p&gt;
&lt;h2 id="endnote"&gt;⚙️EndNote
&lt;/h2&gt;&lt;h3 id="사전-지식"&gt;사전 지식
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java 언어 기초&lt;/li&gt;
&lt;li&gt;객체지향 프로그래밍 개념 (DI, AOP 등)&lt;/li&gt;
&lt;li&gt;톰캣과 같은 WAS 개념&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="더-알아보기"&gt;더 알아보기
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener"
&gt;Spring 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener"
&gt;Spring Boot 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noopener"
&gt;스프링 부트 Reference Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마이크로서비스 아키텍처&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>